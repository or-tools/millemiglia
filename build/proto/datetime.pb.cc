// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datetime.proto

#include "datetime.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace google {
namespace type {

inline constexpr TimeZone::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TimeZone::TimeZone(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimeZoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeZoneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeZoneDefaultTypeInternal() {}
  union {
    TimeZone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeZoneDefaultTypeInternal _TimeZone_default_instance_;

inline constexpr DateTime::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : year_{0},
        month_{0},
        day_{0},
        hours_{0},
        minutes_{0},
        seconds_{0},
        nanos_{0},
        time_offset_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DateTime::DateTime(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeDefaultTypeInternal() {}
  union {
    DateTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeDefaultTypeInternal _DateTime_default_instance_;
}  // namespace type
}  // namespace google
static ::_pb::Metadata file_level_metadata_datetime_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_datetime_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_datetime_2eproto = nullptr;
const ::uint32_t TableStruct_datetime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.year_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.month_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.day_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.hours_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.minutes_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.seconds_),
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.nanos_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_.time_offset_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, _impl_.version_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::google::type::DateTime)},
        {18, -1, -1, sizeof(::google::type::TimeZone)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::google::type::_DateTime_default_instance_._instance,
    &::google::type::_TimeZone_default_instance_._instance,
};
const char descriptor_table_protodef_datetime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016datetime.proto\022\013google.type\032\036google/pr"
    "otobuf/duration.proto\"\340\001\n\010DateTime\022\014\n\004ye"
    "ar\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 \001(\005\022\r\n\005"
    "hours\030\004 \001(\005\022\017\n\007minutes\030\005 \001(\005\022\017\n\007seconds\030"
    "\006 \001(\005\022\r\n\005nanos\030\007 \001(\005\022/\n\nutc_offset\030\010 \001(\013"
    "2\031.google.protobuf.DurationH\000\022*\n\ttime_zo"
    "ne\030\t \001(\0132\025.google.type.TimeZoneH\000B\r\n\013tim"
    "e_offset\"\'\n\010TimeZone\022\n\n\002id\030\001 \001(\t\022\017\n\007vers"
    "ion\030\002 \001(\tBi\n\017com.google.typeB\rDateTimePr"
    "otoP\001Z<google.golang.org/genproto/google"
    "apis/type/datetime;datetime\370\001\001\242\002\003GTPb\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_datetime_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_datetime_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_datetime_2eproto = {
    false,
    false,
    444,
    descriptor_table_protodef_datetime_2eproto,
    "datetime.proto",
    &descriptor_table_datetime_2eproto_once,
    descriptor_table_datetime_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_datetime_2eproto::offsets,
    file_level_metadata_datetime_2eproto,
    file_level_enum_descriptors_datetime_2eproto,
    file_level_service_descriptors_datetime_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_datetime_2eproto_getter() {
  return &descriptor_table_datetime_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_datetime_2eproto(&descriptor_table_datetime_2eproto);
namespace google {
namespace type {
// ===================================================================

class DateTime::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _impl_._oneof_case_);
  static const ::google::protobuf::Duration& utc_offset(const DateTime* msg);
  static const ::google::type::TimeZone& time_zone(const DateTime* msg);
};

const ::google::protobuf::Duration& DateTime::_Internal::utc_offset(const DateTime* msg) {
  return *msg->_impl_.time_offset_.utc_offset_;
}
const ::google::type::TimeZone& DateTime::_Internal::time_zone(const DateTime* msg) {
  return *msg->_impl_.time_offset_.time_zone_;
}
void DateTime::set_allocated_utc_offset(::google::protobuf::Duration* utc_offset) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_time_offset();
  if (utc_offset) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(utc_offset)->GetArena();
    if (message_arena != submessage_arena) {
      utc_offset = ::google::protobuf::internal::GetOwnedMessage(message_arena, utc_offset, submessage_arena);
    }
    set_has_utc_offset();
    _impl_.time_offset_.utc_offset_ = utc_offset;
  }
  // @@protoc_insertion_point(field_set_allocated:google.type.DateTime.utc_offset)
}
void DateTime::clear_utc_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (time_offset_case() == kUtcOffset) {
    if (GetArena() == nullptr) {
      delete _impl_.time_offset_.utc_offset_;
    }
    clear_has_time_offset();
  }
}
void DateTime::set_allocated_time_zone(::google::type::TimeZone* time_zone) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_time_offset();
  if (time_zone) {
    ::google::protobuf::Arena* submessage_arena = time_zone->GetArena();
    if (message_arena != submessage_arena) {
      time_zone = ::google::protobuf::internal::GetOwnedMessage(message_arena, time_zone, submessage_arena);
    }
    set_has_time_zone();
    _impl_.time_offset_.time_zone_ = time_zone;
  }
  // @@protoc_insertion_point(field_set_allocated:google.type.DateTime.time_zone)
}
DateTime::DateTime(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.type.DateTime)
}
inline PROTOBUF_NDEBUG_INLINE DateTime::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : time_offset_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DateTime::DateTime(
    ::google::protobuf::Arena* arena,
    const DateTime& from)
    : ::google::protobuf::Message(arena) {
  DateTime* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, year_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, year_),
           offsetof(Impl_, nanos_) -
               offsetof(Impl_, year_) +
               sizeof(Impl_::nanos_));
  switch (time_offset_case()) {
    case TIME_OFFSET_NOT_SET:
      break;
      case kUtcOffset:
        _impl_.time_offset_.utc_offset_ = CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.time_offset_.utc_offset_);
        break;
      case kTimeZone:
        _impl_.time_offset_.time_zone_ = CreateMaybeMessage<::google::type::TimeZone>(arena, *from._impl_.time_offset_.time_zone_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:google.type.DateTime)
}
inline PROTOBUF_NDEBUG_INLINE DateTime::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : time_offset_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DateTime::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, year_),
           0,
           offsetof(Impl_, nanos_) -
               offsetof(Impl_, year_) +
               sizeof(Impl_::nanos_));
}
DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:google.type.DateTime)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DateTime::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_time_offset()) {
    clear_time_offset();
  }
  _impl_.~Impl_();
}

void DateTime::clear_time_offset() {
// @@protoc_insertion_point(one_of_clear_start:google.type.DateTime)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (time_offset_case()) {
    case kUtcOffset: {
      if (GetArena() == nullptr) {
        delete _impl_.time_offset_.utc_offset_;
      }
      break;
    }
    case kTimeZone: {
      if (GetArena() == nullptr) {
        delete _impl_.time_offset_.time_zone_;
      }
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TIME_OFFSET_NOT_SET;
}


PROTOBUF_NOINLINE void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.DateTime)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nanos_) -
      reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.nanos_));
  clear_time_offset();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 9, 2, 0, 2> DateTime::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DateTime_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 year = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.year_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.year_)}},
    // int32 month = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.month_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.month_)}},
    // int32 day = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.day_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.day_)}},
    // int32 hours = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.hours_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.hours_)}},
    // int32 minutes = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.minutes_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.minutes_)}},
    // int32 seconds = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.seconds_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.seconds_)}},
    // int32 nanos = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DateTime, _impl_.nanos_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.nanos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 year = 1;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.year_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 month = 2;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.month_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 day = 3;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.day_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 hours = 4;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.hours_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 minutes = 5;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.minutes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seconds = 6;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 nanos = 7;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.nanos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Duration utc_offset = 8;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.time_offset_.utc_offset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.type.TimeZone time_zone = 9;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.time_offset_.time_zone_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::type::TimeZone>()},
  }}, {{
  }},
};

::uint8_t* DateTime::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.type.DateTime)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_day(), target);
  }

  // int32 hours = 4;
  if (this->_internal_hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_hours(), target);
  }

  // int32 minutes = 5;
  if (this->_internal_minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_minutes(), target);
  }

  // int32 seconds = 6;
  if (this->_internal_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_seconds(), target);
  }

  // int32 nanos = 7;
  if (this->_internal_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_nanos(), target);
  }

  switch (time_offset_case()) {
    case kUtcOffset: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::utc_offset(this),
          _Internal::utc_offset(this).GetCachedSize(), target, stream);
      break;
    }
    case kTimeZone: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::time_zone(this),
          _Internal::time_zone(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.type.DateTime)
  return target;
}

::size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.DateTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_day());
  }

  // int32 hours = 4;
  if (this->_internal_hours() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hours());
  }

  // int32 minutes = 5;
  if (this->_internal_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_minutes());
  }

  // int32 seconds = 6;
  if (this->_internal_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seconds());
  }

  // int32 nanos = 7;
  if (this->_internal_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nanos());
  }

  switch (time_offset_case()) {
    // .google.protobuf.Duration utc_offset = 8;
    case kUtcOffset: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_offset_.utc_offset_);
      break;
    }
    // .google.type.TimeZone time_zone = 9;
    case kTimeZone: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_offset_.time_zone_);
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DateTime::_class_data_ = {
    DateTime::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DateTime::GetClassData() const {
  return &_class_data_;
}

void DateTime::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DateTime*>(&to_msg);
  auto& from = static_cast<const DateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.type.DateTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_hours() != 0) {
    _this->_internal_set_hours(from._internal_hours());
  }
  if (from._internal_minutes() != 0) {
    _this->_internal_set_minutes(from._internal_minutes());
  }
  if (from._internal_seconds() != 0) {
    _this->_internal_set_seconds(from._internal_seconds());
  }
  if (from._internal_nanos() != 0) {
    _this->_internal_set_nanos(from._internal_nanos());
  }
  switch (from.time_offset_case()) {
    case kUtcOffset: {
      _this->_internal_mutable_utc_offset()->::google::protobuf::Duration::MergeFrom(
          from._internal_utc_offset());
      break;
    }
    case kTimeZone: {
      _this->_internal_mutable_time_zone()->::google::type::TimeZone::MergeFrom(
          from._internal_time_zone());
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DateTime::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DateTime::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DateTime::InternalSwap(DateTime* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTime, _impl_.nanos_)
      + sizeof(DateTime::_impl_.nanos_)
      - PROTOBUF_FIELD_OFFSET(DateTime, _impl_.year_)>(
          reinterpret_cast<char*>(&_impl_.year_),
          reinterpret_cast<char*>(&other->_impl_.year_));
  swap(_impl_.time_offset_, other->_impl_.time_offset_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datetime_2eproto_getter, &descriptor_table_datetime_2eproto_once,
      file_level_metadata_datetime_2eproto[0]);
}
// ===================================================================

class TimeZone::_Internal {
 public:
};

TimeZone::TimeZone(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.type.TimeZone)
}
inline PROTOBUF_NDEBUG_INLINE TimeZone::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : id_(arena, from.id_),
        version_(arena, from.version_),
        _cached_size_{0} {}

TimeZone::TimeZone(
    ::google::protobuf::Arena* arena,
    const TimeZone& from)
    : ::google::protobuf::Message(arena) {
  TimeZone* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:google.type.TimeZone)
}
inline PROTOBUF_NDEBUG_INLINE TimeZone::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        version_(arena),
        _cached_size_{0} {}

inline void TimeZone::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TimeZone::~TimeZone() {
  // @@protoc_insertion_point(destructor:google.type.TimeZone)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TimeZone::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.version_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TimeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.TimeZone)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TimeZone::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 38, 2> TimeZone::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TimeZone_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TimeZone, _impl_.version_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TimeZone, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(TimeZone, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string version = 2;
    {PROTOBUF_FIELD_OFFSET(TimeZone, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\2\7\0\0\0\0\0"
    "google.type.TimeZone"
    "id"
    "version"
  }},
};

::uint8_t* TimeZone::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.type.TimeZone)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.type.TimeZone.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.type.TimeZone.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.type.TimeZone)
  return target;
}

::size_t TimeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.TimeZone)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TimeZone::_class_data_ = {
    TimeZone::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TimeZone::GetClassData() const {
  return &_class_data_;
}

void TimeZone::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TimeZone*>(&to_msg);
  auto& from = static_cast<const TimeZone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.type.TimeZone)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimeZone::CopyFrom(const TimeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.TimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TimeZone::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TimeZone::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TimeZone::InternalSwap(TimeZone* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
}

::google::protobuf::Metadata TimeZone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datetime_2eproto_getter, &descriptor_table_datetime_2eproto_once,
      file_level_metadata_datetime_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace google
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
