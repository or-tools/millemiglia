// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datetime.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_datetime_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_datetime_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_datetime_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_datetime_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_datetime_2eproto;
namespace google {
namespace type {
class DateTime;
struct DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class TimeZone;
struct TimeZoneDefaultTypeInternal;
extern TimeZoneDefaultTypeInternal _TimeZone_default_instance_;
}  // namespace type
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace type {

// ===================================================================


// -------------------------------------------------------------------

class TimeZone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.type.TimeZone) */ {
 public:
  inline TimeZone() : TimeZone(nullptr) {}
  ~TimeZone() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeZone(::google::protobuf::internal::ConstantInitialized);

  inline TimeZone(const TimeZone& from)
      : TimeZone(nullptr, from) {}
  TimeZone(TimeZone&& from) noexcept
    : TimeZone() {
    *this = ::std::move(from);
  }

  inline TimeZone& operator=(const TimeZone& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeZone& operator=(TimeZone&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeZone& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeZone* internal_default_instance() {
    return reinterpret_cast<const TimeZone*>(
               &_TimeZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeZone& a, TimeZone& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeZone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeZone* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeZone* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeZone>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimeZone& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TimeZone& from) {
    TimeZone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimeZone* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.type.TimeZone";
  }
  protected:
  explicit TimeZone(::google::protobuf::Arena* arena);
  TimeZone(::google::protobuf::Arena* arena, const TimeZone& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:google.type.TimeZone)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datetime_2eproto;
};// -------------------------------------------------------------------

class DateTime final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.type.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  ~DateTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DateTime(::google::protobuf::internal::ConstantInitialized);

  inline DateTime(const DateTime& from)
      : DateTime(nullptr, from) {}
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateTime& default_instance() {
    return *internal_default_instance();
  }
  enum TimeOffsetCase {
    kUtcOffset = 8,
    kTimeZone = 9,
    TIME_OFFSET_NOT_SET = 0,
  };

  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DateTime* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DateTime& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DateTime& from) {
    DateTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DateTime* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.type.DateTime";
  }
  protected:
  explicit DateTime(::google::protobuf::Arena* arena);
  DateTime(::google::protobuf::Arena* arena, const DateTime& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHoursFieldNumber = 4,
    kMinutesFieldNumber = 5,
    kSecondsFieldNumber = 6,
    kNanosFieldNumber = 7,
    kUtcOffsetFieldNumber = 8,
    kTimeZoneFieldNumber = 9,
  };
  // int32 year = 1;
  void clear_year() ;
  ::int32_t year() const;
  void set_year(::int32_t value);

  private:
  ::int32_t _internal_year() const;
  void _internal_set_year(::int32_t value);

  public:
  // int32 month = 2;
  void clear_month() ;
  ::int32_t month() const;
  void set_month(::int32_t value);

  private:
  ::int32_t _internal_month() const;
  void _internal_set_month(::int32_t value);

  public:
  // int32 day = 3;
  void clear_day() ;
  ::int32_t day() const;
  void set_day(::int32_t value);

  private:
  ::int32_t _internal_day() const;
  void _internal_set_day(::int32_t value);

  public:
  // int32 hours = 4;
  void clear_hours() ;
  ::int32_t hours() const;
  void set_hours(::int32_t value);

  private:
  ::int32_t _internal_hours() const;
  void _internal_set_hours(::int32_t value);

  public:
  // int32 minutes = 5;
  void clear_minutes() ;
  ::int32_t minutes() const;
  void set_minutes(::int32_t value);

  private:
  ::int32_t _internal_minutes() const;
  void _internal_set_minutes(::int32_t value);

  public:
  // int32 seconds = 6;
  void clear_seconds() ;
  ::int32_t seconds() const;
  void set_seconds(::int32_t value);

  private:
  ::int32_t _internal_seconds() const;
  void _internal_set_seconds(::int32_t value);

  public:
  // int32 nanos = 7;
  void clear_nanos() ;
  ::int32_t nanos() const;
  void set_nanos(::int32_t value);

  private:
  ::int32_t _internal_nanos() const;
  void _internal_set_nanos(::int32_t value);

  public:
  // .google.protobuf.Duration utc_offset = 8;
  bool has_utc_offset() const;
  private:
  bool _internal_has_utc_offset() const;

  public:
  void clear_utc_offset() ;
  const ::google::protobuf::Duration& utc_offset() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_utc_offset();
  ::google::protobuf::Duration* mutable_utc_offset();
  void set_allocated_utc_offset(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_utc_offset(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_utc_offset();

  private:
  const ::google::protobuf::Duration& _internal_utc_offset() const;
  ::google::protobuf::Duration* _internal_mutable_utc_offset();

  public:
  // .google.type.TimeZone time_zone = 9;
  bool has_time_zone() const;
  private:
  bool _internal_has_time_zone() const;

  public:
  void clear_time_zone() ;
  const ::google::type::TimeZone& time_zone() const;
  PROTOBUF_NODISCARD ::google::type::TimeZone* release_time_zone();
  ::google::type::TimeZone* mutable_time_zone();
  void set_allocated_time_zone(::google::type::TimeZone* value);
  void unsafe_arena_set_allocated_time_zone(::google::type::TimeZone* value);
  ::google::type::TimeZone* unsafe_arena_release_time_zone();

  private:
  const ::google::type::TimeZone& _internal_time_zone() const;
  ::google::type::TimeZone* _internal_mutable_time_zone();

  public:
  void clear_time_offset();
  TimeOffsetCase time_offset_case() const;
  // @@protoc_insertion_point(class_scope:google.type.DateTime)
 private:
  class _Internal;
  void set_has_utc_offset();
  void set_has_time_zone();

  inline bool has_time_offset() const;
  inline void clear_has_time_offset();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t year_;
    ::int32_t month_;
    ::int32_t day_;
    ::int32_t hours_;
    ::int32_t minutes_;
    ::int32_t seconds_;
    ::int32_t nanos_;
    union TimeOffsetUnion {
      constexpr TimeOffsetUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Duration* utc_offset_;
      ::google::type::TimeZone* time_zone_;
    } time_offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datetime_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DateTime

// int32 year = 1;
inline void DateTime::clear_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.year_ = 0;
}
inline ::int32_t DateTime::year() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.year)
  return _internal_year();
}
inline void DateTime::set_year(::int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.year)
}
inline ::int32_t DateTime::_internal_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.year_;
}
inline void DateTime::_internal_set_year(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.year_ = value;
}

// int32 month = 2;
inline void DateTime::clear_month() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.month_ = 0;
}
inline ::int32_t DateTime::month() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.month)
  return _internal_month();
}
inline void DateTime::set_month(::int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.month)
}
inline ::int32_t DateTime::_internal_month() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.month_;
}
inline void DateTime::_internal_set_month(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.month_ = value;
}

// int32 day = 3;
inline void DateTime::clear_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.day_ = 0;
}
inline ::int32_t DateTime::day() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.day)
  return _internal_day();
}
inline void DateTime::set_day(::int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.day)
}
inline ::int32_t DateTime::_internal_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.day_;
}
inline void DateTime::_internal_set_day(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.day_ = value;
}

// int32 hours = 4;
inline void DateTime::clear_hours() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hours_ = 0;
}
inline ::int32_t DateTime::hours() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.hours)
  return _internal_hours();
}
inline void DateTime::set_hours(::int32_t value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.hours)
}
inline ::int32_t DateTime::_internal_hours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hours_;
}
inline void DateTime::_internal_set_hours(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hours_ = value;
}

// int32 minutes = 5;
inline void DateTime::clear_minutes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minutes_ = 0;
}
inline ::int32_t DateTime::minutes() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.minutes)
  return _internal_minutes();
}
inline void DateTime::set_minutes(::int32_t value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.minutes)
}
inline ::int32_t DateTime::_internal_minutes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minutes_;
}
inline void DateTime::_internal_set_minutes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minutes_ = value;
}

// int32 seconds = 6;
inline void DateTime::clear_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seconds_ = 0;
}
inline ::int32_t DateTime::seconds() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.seconds)
  return _internal_seconds();
}
inline void DateTime::set_seconds(::int32_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.seconds)
}
inline ::int32_t DateTime::_internal_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seconds_;
}
inline void DateTime::_internal_set_seconds(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seconds_ = value;
}

// int32 nanos = 7;
inline void DateTime::clear_nanos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nanos_ = 0;
}
inline ::int32_t DateTime::nanos() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.nanos)
  return _internal_nanos();
}
inline void DateTime::set_nanos(::int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.nanos)
}
inline ::int32_t DateTime::_internal_nanos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nanos_;
}
inline void DateTime::_internal_set_nanos(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nanos_ = value;
}

// .google.protobuf.Duration utc_offset = 8;
inline bool DateTime::has_utc_offset() const {
  return time_offset_case() == kUtcOffset;
}
inline bool DateTime::_internal_has_utc_offset() const {
  return time_offset_case() == kUtcOffset;
}
inline void DateTime::set_has_utc_offset() {
  _impl_._oneof_case_[0] = kUtcOffset;
}
inline ::google::protobuf::Duration* DateTime::release_utc_offset() {
  // @@protoc_insertion_point(field_release:google.type.DateTime.utc_offset)
  if (time_offset_case() == kUtcOffset) {
    clear_has_time_offset();
    auto* temp = _impl_.time_offset_.utc_offset_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_offset_.utc_offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Duration& DateTime::_internal_utc_offset() const {
  return time_offset_case() == kUtcOffset ? *_impl_.time_offset_.utc_offset_ : reinterpret_cast<::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& DateTime::utc_offset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.type.DateTime.utc_offset)
  return _internal_utc_offset();
}
inline ::google::protobuf::Duration* DateTime::unsafe_arena_release_utc_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.type.DateTime.utc_offset)
  if (time_offset_case() == kUtcOffset) {
    clear_has_time_offset();
    auto* temp = _impl_.time_offset_.utc_offset_;
    _impl_.time_offset_.utc_offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DateTime::unsafe_arena_set_allocated_utc_offset(::google::protobuf::Duration* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_time_offset();
  if (value) {
    set_has_utc_offset();
    _impl_.time_offset_.utc_offset_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.type.DateTime.utc_offset)
}
inline ::google::protobuf::Duration* DateTime::_internal_mutable_utc_offset() {
  if (time_offset_case() != kUtcOffset) {
    clear_time_offset();
    set_has_utc_offset();
    _impl_.time_offset_.utc_offset_ = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
  }
  return _impl_.time_offset_.utc_offset_;
}
inline ::google::protobuf::Duration* DateTime::mutable_utc_offset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_utc_offset();
  // @@protoc_insertion_point(field_mutable:google.type.DateTime.utc_offset)
  return _msg;
}

// .google.type.TimeZone time_zone = 9;
inline bool DateTime::has_time_zone() const {
  return time_offset_case() == kTimeZone;
}
inline bool DateTime::_internal_has_time_zone() const {
  return time_offset_case() == kTimeZone;
}
inline void DateTime::set_has_time_zone() {
  _impl_._oneof_case_[0] = kTimeZone;
}
inline void DateTime::clear_time_zone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (time_offset_case() == kTimeZone) {
    if (GetArena() == nullptr) {
      delete _impl_.time_offset_.time_zone_;
    }
    clear_has_time_offset();
  }
}
inline ::google::type::TimeZone* DateTime::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.type.DateTime.time_zone)
  if (time_offset_case() == kTimeZone) {
    clear_has_time_offset();
    auto* temp = _impl_.time_offset_.time_zone_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_offset_.time_zone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::type::TimeZone& DateTime::_internal_time_zone() const {
  return time_offset_case() == kTimeZone ? *_impl_.time_offset_.time_zone_ : reinterpret_cast<::google::type::TimeZone&>(::google::type::_TimeZone_default_instance_);
}
inline const ::google::type::TimeZone& DateTime::time_zone() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.type.DateTime.time_zone)
  return _internal_time_zone();
}
inline ::google::type::TimeZone* DateTime::unsafe_arena_release_time_zone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.type.DateTime.time_zone)
  if (time_offset_case() == kTimeZone) {
    clear_has_time_offset();
    auto* temp = _impl_.time_offset_.time_zone_;
    _impl_.time_offset_.time_zone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DateTime::unsafe_arena_set_allocated_time_zone(::google::type::TimeZone* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_time_offset();
  if (value) {
    set_has_time_zone();
    _impl_.time_offset_.time_zone_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.type.DateTime.time_zone)
}
inline ::google::type::TimeZone* DateTime::_internal_mutable_time_zone() {
  if (time_offset_case() != kTimeZone) {
    clear_time_offset();
    set_has_time_zone();
    _impl_.time_offset_.time_zone_ = CreateMaybeMessage<::google::type::TimeZone>(GetArena());
  }
  return _impl_.time_offset_.time_zone_;
}
inline ::google::type::TimeZone* DateTime::mutable_time_zone() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::type::TimeZone* _msg = _internal_mutable_time_zone();
  // @@protoc_insertion_point(field_mutable:google.type.DateTime.time_zone)
  return _msg;
}

inline bool DateTime::has_time_offset() const {
  return time_offset_case() != TIME_OFFSET_NOT_SET;
}
inline void DateTime::clear_has_time_offset() {
  _impl_._oneof_case_[0] = TIME_OFFSET_NOT_SET;
}
inline DateTime::TimeOffsetCase DateTime::time_offset_case() const {
  return DateTime::TimeOffsetCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeZone

// string id = 1;
inline void TimeZone::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TimeZone::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.type.TimeZone.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TimeZone::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.type.TimeZone.id)
}
inline std::string* TimeZone::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.type.TimeZone.id)
  return _s;
}
inline const std::string& TimeZone::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void TimeZone::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* TimeZone::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* TimeZone::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.type.TimeZone.id)
  return _impl_.id_.Release();
}
inline void TimeZone::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.TimeZone.id)
}

// string version = 2;
inline void TimeZone::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& TimeZone::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.type.TimeZone.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TimeZone::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.type.TimeZone.version)
}
inline std::string* TimeZone::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:google.type.TimeZone.version)
  return _s;
}
inline const std::string& TimeZone::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void TimeZone::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* TimeZone::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* TimeZone::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.type.TimeZone.version)
  return _impl_.version_.Release();
}
inline void TimeZone::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.TimeZone.version)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_datetime_2eproto_2epb_2eh
