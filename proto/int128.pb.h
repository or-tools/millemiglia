// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: int128.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_int128_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_int128_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_int128_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_int128_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_int128_2eproto;
namespace storage_util {
class Int128;
struct Int128DefaultTypeInternal;
extern Int128DefaultTypeInternal _Int128_default_instance_;
}  // namespace storage_util
PROTOBUF_NAMESPACE_OPEN
template<> ::storage_util::Int128* Arena::CreateMaybeMessage<::storage_util::Int128>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storage_util {

// ===================================================================

class Int128 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_util.Int128) */ {
 public:
  inline Int128() : Int128(nullptr) {}
  ~Int128() override;
  explicit PROTOBUF_CONSTEXPR Int128(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int128(const Int128& from);
  Int128(Int128&& from) noexcept
    : Int128() {
    *this = ::std::move(from);
  }

  inline Int128& operator=(const Int128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int128& operator=(Int128&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int128& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int128* internal_default_instance() {
    return reinterpret_cast<const Int128*>(
               &_Int128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int128& a, Int128& b) {
    a.Swap(&b);
  }
  inline void Swap(Int128* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int128* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int128>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int128& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int128& from) {
    Int128::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int128* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_util.Int128";
  }
  protected:
  explicit Int128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // int64 high = 1 [jstype = JS_STRING];
  void clear_high();
  int64_t high() const;
  void set_high(int64_t value);
  private:
  int64_t _internal_high() const;
  void _internal_set_high(int64_t value);
  public:

  // uint64 low = 2 [jstype = JS_STRING];
  void clear_low();
  uint64_t low() const;
  void set_low(uint64_t value);
  private:
  uint64_t _internal_low() const;
  void _internal_set_low(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:storage_util.Int128)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t high_;
    uint64_t low_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_int128_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int128

// int64 high = 1 [jstype = JS_STRING];
inline void Int128::clear_high() {
  _impl_.high_ = int64_t{0};
}
inline int64_t Int128::_internal_high() const {
  return _impl_.high_;
}
inline int64_t Int128::high() const {
  // @@protoc_insertion_point(field_get:storage_util.Int128.high)
  return _internal_high();
}
inline void Int128::_internal_set_high(int64_t value) {
  
  _impl_.high_ = value;
}
inline void Int128::set_high(int64_t value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:storage_util.Int128.high)
}

// uint64 low = 2 [jstype = JS_STRING];
inline void Int128::clear_low() {
  _impl_.low_ = uint64_t{0u};
}
inline uint64_t Int128::_internal_low() const {
  return _impl_.low_;
}
inline uint64_t Int128::low() const {
  // @@protoc_insertion_point(field_get:storage_util.Int128.low)
  return _internal_low();
}
inline void Int128::_internal_set_low(uint64_t value) {
  
  _impl_.low_ = value;
}
inline void Int128::set_low(uint64_t value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:storage_util.Int128.low)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace storage_util

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_int128_2eproto
