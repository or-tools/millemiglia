// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lattle.proto

#include "lattle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace lattle {
PROTOBUF_CONSTEXPR DateTimeRange::DateTimeRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.first_date_)*/nullptr
  , /*decltype(_impl_.last_date_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DateTimeRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeRangeDefaultTypeInternal() {}
  union {
    DateTimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeRangeDefaultTypeInternal _DateTimeRange_default_instance_;
PROTOBUF_CONSTEXPR IntegerRange::IntegerRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_value_)*/0
  , /*decltype(_impl_.end_value_)*/0} {}
struct IntegerRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegerRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegerRangeDefaultTypeInternal() {}
  union {
    IntegerRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegerRangeDefaultTypeInternal _IntegerRange_default_instance_;
PROTOBUF_CONSTEXPR Function1D::Function1D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Function1DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Function1DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Function1DDefaultTypeInternal() {}
  union {
    Function1D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Function1DDefaultTypeInternal _Function1D_default_instance_;
PROTOBUF_CONSTEXPR PricingStrategy::PricingStrategy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pricing_strategy_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PricingStrategyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PricingStrategyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PricingStrategyDefaultTypeInternal() {}
  union {
    PricingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PricingStrategyDefaultTypeInternal _PricingStrategy_default_instance_;
PROTOBUF_CONSTEXPR SeparableNDFunction_ComponentsEntry_DoNotUse::SeparableNDFunction_ComponentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SeparableNDFunction_ComponentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeparableNDFunction_ComponentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeparableNDFunction_ComponentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SeparableNDFunction_ComponentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeparableNDFunction_ComponentsEntry_DoNotUseDefaultTypeInternal _SeparableNDFunction_ComponentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SeparableNDFunction::SeparableNDFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.components_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.constant_price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeparableNDFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeparableNDFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeparableNDFunctionDefaultTypeInternal() {}
  union {
    SeparableNDFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeparableNDFunctionDefaultTypeInternal _SeparableNDFunction_default_instance_;
PROTOBUF_CONSTEXPR ValueDimension::ValueDimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueDimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDimensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDimensionDefaultTypeInternal() {}
  union {
    ValueDimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDimensionDefaultTypeInternal _ValueDimension_default_instance_;
PROTOBUF_CONSTEXPR PieceWiseAffineFunction::PieceWiseAffineFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PieceWiseAffineFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PieceWiseAffineFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PieceWiseAffineFunctionDefaultTypeInternal() {}
  union {
    PieceWiseAffineFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PieceWiseAffineFunctionDefaultTypeInternal _PieceWiseAffineFunction_default_instance_;
PROTOBUF_CONSTEXPR PieceWiseAffineSegment::PieceWiseAffineSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_x_)*/0
  , /*decltype(_impl_.start_y_)*/0
  , /*decltype(_impl_.end_x_)*/0
  , /*decltype(_impl_.end_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PieceWiseAffineSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PieceWiseAffineSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PieceWiseAffineSegmentDefaultTypeInternal() {}
  union {
    PieceWiseAffineSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PieceWiseAffineSegmentDefaultTypeInternal _PieceWiseAffineSegment_default_instance_;
PROTOBUF_CONSTEXPR Instance_ParcelsEntry_DoNotUse::Instance_ParcelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Instance_ParcelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Instance_ParcelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Instance_ParcelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Instance_ParcelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Instance_ParcelsEntry_DoNotUseDefaultTypeInternal _Instance_ParcelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Instance::Instance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parcels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.network_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceDefaultTypeInternal _Instance_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetwork_LinesEntry_DoNotUse::LogisticsNetwork_LinesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LogisticsNetwork_LinesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetwork_LinesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetwork_LinesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogisticsNetwork_LinesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetwork_LinesEntry_DoNotUseDefaultTypeInternal _LogisticsNetwork_LinesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetwork_VehiclesEntry_DoNotUse::LogisticsNetwork_VehiclesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LogisticsNetwork_VehiclesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetwork_VehiclesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetwork_VehiclesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogisticsNetwork_VehiclesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetwork_VehiclesEntry_DoNotUseDefaultTypeInternal _LogisticsNetwork_VehiclesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetwork_HubsEntry_DoNotUse::LogisticsNetwork_HubsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LogisticsNetwork_HubsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetwork_HubsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetwork_HubsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogisticsNetwork_HubsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetwork_HubsEntry_DoNotUseDefaultTypeInternal _LogisticsNetwork_HubsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetwork::LogisticsNetwork(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lines_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.vehicles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.hubs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_.distance_matrix_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pricing_)*/nullptr
  , /*decltype(_impl_.time_step_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogisticsNetworkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetworkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetworkDefaultTypeInternal() {}
  union {
    LogisticsNetwork _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetworkDefaultTypeInternal _LogisticsNetwork_default_instance_;
PROTOBUF_CONSTEXPR Line_NextRotationsEntry_DoNotUse::Line_NextRotationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Line_NextRotationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Line_NextRotationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Line_NextRotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Line_NextRotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Line_NextRotationsEntry_DoNotUseDefaultTypeInternal _Line_NextRotationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hub_ids_)*/{}
  , /*decltype(_impl_.next_rotations_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
PROTOBUF_CONSTEXPR GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal _GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GeneratedLineAndRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeneratedLineAndRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeneratedLineAndRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeneratedLineAndRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal _GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GeneratedLineAndRotation::GeneratedLineAndRotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arrival_times_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.departure_times_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeneratedLineAndRotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeneratedLineAndRotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeneratedLineAndRotationDefaultTypeInternal() {}
  union {
    GeneratedLineAndRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeneratedLineAndRotationDefaultTypeInternal _GeneratedLineAndRotation_default_instance_;
PROTOBUF_CONSTEXPR LineRotation_ArrivalTimesEntry_DoNotUse::LineRotation_ArrivalTimesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LineRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LineRotation_ArrivalTimesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRotation_ArrivalTimesEntry_DoNotUseDefaultTypeInternal _LineRotation_ArrivalTimesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LineRotation_DepartureTimesEntry_DoNotUse::LineRotation_DepartureTimesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LineRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LineRotation_DepartureTimesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRotation_DepartureTimesEntry_DoNotUseDefaultTypeInternal _LineRotation_DepartureTimesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal _LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUseDefaultTypeInternal _LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LineRotation::LineRotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arrival_times_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.departure_times_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.starting_earliness_tardiness_costs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.arrival_earliness_tardiness_costs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.vehicles_)*/{}
  , /*decltype(_impl_.maximum_number_vehicles_)*/nullptr
  , /*decltype(_impl_.fixed_price_)*/nullptr} {}
struct LineRotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRotationDefaultTypeInternal() {}
  union {
    LineRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRotationDefaultTypeInternal _LineRotation_default_instance_;
PROTOBUF_CONSTEXPR EarlinessTardiness::EarlinessTardiness(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maximum_earliness_)*/nullptr
  , /*decltype(_impl_.maximum_tardiness_)*/nullptr
  , /*decltype(_impl_.earliness_cost_)*/nullptr
  , /*decltype(_impl_.tardiness_cost_)*/nullptr} {}
struct EarlinessTardinessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EarlinessTardinessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EarlinessTardinessDefaultTypeInternal() {}
  union {
    EarlinessTardiness _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EarlinessTardinessDefaultTypeInternal _EarlinessTardiness_default_instance_;
PROTOBUF_CONSTEXPR Vehicle::Vehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.capacities_)*/{}
  , /*decltype(_impl_.current_position_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cost_)*/nullptr
  , /*decltype(_impl_.pricing_)*/nullptr
  , /*decltype(_impl_.refrigerated_)*/false
  , /*decltype(_impl_.allowed_for_generated_routes_)*/false} {}
struct VehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDefaultTypeInternal() {}
  union {
    Vehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDefaultTypeInternal _Vehicle_default_instance_;
PROTOBUF_CONSTEXPR Hub::Hub(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opening_times_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.cross_docking_capacity_)*/nullptr
  , /*decltype(_impl_.cross_docking_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HubDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HubDefaultTypeInternal() {}
  union {
    Hub _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HubDefaultTypeInternal _Hub_default_instance_;
PROTOBUF_CONSTEXPR CrossDockingCapacity::CrossDockingCapacity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.capacity_per_hour_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossDockingCapacityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossDockingCapacityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossDockingCapacityDefaultTypeInternal() {}
  union {
    CrossDockingCapacity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossDockingCapacityDefaultTypeInternal _CrossDockingCapacity_default_instance_;
PROTOBUF_CONSTEXPR CrossDockingTime::CrossDockingTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_constant_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossDockingTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossDockingTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossDockingTimeDefaultTypeInternal() {}
  union {
    CrossDockingTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossDockingTimeDefaultTypeInternal _CrossDockingTime_default_instance_;
PROTOBUF_CONSTEXPR DistanceMatrixEntry::DistanceMatrixEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weights_)*/{}
  , /*decltype(_impl_.source_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistanceMatrixEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceMatrixEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceMatrixEntryDefaultTypeInternal() {}
  union {
    DistanceMatrixEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceMatrixEntryDefaultTypeInternal _DistanceMatrixEntry_default_instance_;
PROTOBUF_CONSTEXPR Parcel::Parcel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_)*/{}
  , /*decltype(_impl_.parcel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departure_time_)*/nullptr
  , /*decltype(_impl_.arrival_time_)*/nullptr
  , /*decltype(_impl_.arrival_earliness_tardiness_cost_)*/nullptr
  , /*decltype(_impl_.revenue_)*/0
  , /*decltype(_impl_.must_be_refrigerated_)*/false} {}
struct ParcelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParcelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParcelDefaultTypeInternal() {}
  union {
    Parcel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParcelDefaultTypeInternal _Parcel_default_instance_;
PROTOBUF_CONSTEXPR ParcelRoute_CostEntry_DoNotUse::ParcelRoute_CostEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ParcelRoute_CostEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParcelRoute_CostEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParcelRoute_CostEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ParcelRoute_CostEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParcelRoute_CostEntry_DoNotUseDefaultTypeInternal _ParcelRoute_CostEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ParcelRoute::ParcelRoute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_segments_)*/{}
  , /*decltype(_impl_.cost_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.parcel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departure_time_)*/nullptr
  , /*decltype(_impl_.arrival_time_)*/nullptr
  , /*decltype(_impl_.fingerprint_)*/nullptr
  , /*decltype(_impl_.incurred_penalties_from_arrival_time_per_minute_)*/0
  , /*decltype(_impl_.cost_constant_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParcelRouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParcelRouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParcelRouteDefaultTypeInternal() {}
  union {
    ParcelRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParcelRouteDefaultTypeInternal _ParcelRoute_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR IncompletePath::IncompletePath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncompletePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncompletePathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncompletePathDefaultTypeInternal() {}
  union {
    IncompletePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncompletePathDefaultTypeInternal _IncompletePath_default_instance_;
PROTOBUF_CONSTEXPR PathSegment::PathSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_rotation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vehicle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathSegmentDefaultTypeInternal() {}
  union {
    PathSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathSegmentDefaultTypeInternal _PathSegment_default_instance_;
PROTOBUF_CONSTEXPR AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUseDefaultTypeInternal _AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AnnotatedPathSegment::AnnotatedPathSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_cost_due_to_vehicle_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.path_segment_)*/nullptr
  , /*decltype(_impl_.arrival_time_)*/nullptr
  , /*decltype(_impl_.departure_time_)*/nullptr
  , /*decltype(_impl_.segment_cost_constant_)*/0
  , /*decltype(_impl_.segment_cost_due_to_departure_)*/0
  , /*decltype(_impl_.segment_cost_due_to_arrival_)*/0
  , /*decltype(_impl_.is_committed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotatedPathSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotatedPathSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotatedPathSegmentDefaultTypeInternal() {}
  union {
    AnnotatedPathSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotatedPathSegmentDefaultTypeInternal _AnnotatedPathSegment_default_instance_;
PROTOBUF_CONSTEXPR EarlinessTardinessCost::EarlinessTardinessCost(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.earliness_)*/0
  , /*decltype(_impl_.tardiness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EarlinessTardinessCostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EarlinessTardinessCostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EarlinessTardinessCostDefaultTypeInternal() {}
  union {
    EarlinessTardinessCost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EarlinessTardinessCostDefaultTypeInternal _EarlinessTardinessCost_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetworkState_UsedCapacityInVehicle::LogisticsNetworkState_UsedCapacityInVehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.used_capacity_)*/{}
  , /*decltype(_impl_.line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_rotation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vehicle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogisticsNetworkState_UsedCapacityInVehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetworkState_UsedCapacityInVehicleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetworkState_UsedCapacityInVehicleDefaultTypeInternal() {}
  union {
    LogisticsNetworkState_UsedCapacityInVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetworkState_UsedCapacityInVehicleDefaultTypeInternal _LogisticsNetworkState_UsedCapacityInVehicle_default_instance_;
PROTOBUF_CONSTEXPR LogisticsNetworkState::LogisticsNetworkState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routed_parcels_)*/{}
  , /*decltype(_impl_.parcel_routes_)*/{}
  , /*decltype(_impl_.used_capacity_in_vehicle_)*/{}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogisticsNetworkStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogisticsNetworkStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogisticsNetworkStateDefaultTypeInternal() {}
  union {
    LogisticsNetworkState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogisticsNetworkStateDefaultTypeInternal _LogisticsNetworkState_default_instance_;
PROTOBUF_CONSTEXPR LattleValidationError_FieldReference::LattleValidationError_FieldReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_field_)*/nullptr
  , /*decltype(_impl_.index_or_key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LattleValidationError_FieldReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LattleValidationError_FieldReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LattleValidationError_FieldReferenceDefaultTypeInternal() {}
  union {
    LattleValidationError_FieldReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LattleValidationError_FieldReferenceDefaultTypeInternal _LattleValidationError_FieldReference_default_instance_;
PROTOBUF_CONSTEXPR LattleValidationError::LattleValidationError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offending_values_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_)*/nullptr
  , /*decltype(_impl_.code_)*/0} {}
struct LattleValidationErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LattleValidationErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LattleValidationErrorDefaultTypeInternal() {}
  union {
    LattleValidationError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LattleValidationErrorDefaultTypeInternal _LattleValidationError_default_instance_;
}  // namespace lattle
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_lattle_2eproto[44];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lattle_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lattle_2eproto = nullptr;

const uint32_t TableStruct_lattle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DateTimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DateTimeRange, _impl_.first_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DateTimeRange, _impl_.last_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IntegerRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IntegerRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IntegerRange, _impl_.start_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IntegerRange, _impl_.end_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Function1D, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Function1D, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Function1D, _impl_.function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PricingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PricingStrategy, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PricingStrategy, _impl_.pricing_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction, _impl_.components_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::SeparableNDFunction, _impl_.constant_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ValueDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ValueDimension, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ValueDimension, _impl_.dimension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineFunction, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineSegment, _impl_.start_x_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineSegment, _impl_.start_y_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineSegment, _impl_.end_x_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PieceWiseAffineSegment, _impl_.end_y_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance_ParcelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance_ParcelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance_ParcelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance_ParcelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Instance, _impl_.parcels_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.lines_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.vehicles_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.hubs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.pricing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.time_step_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetwork, _impl_.distance_matrix_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line_NextRotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line_NextRotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line_NextRotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line_NextRotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line, _impl_.hub_ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Line, _impl_.next_rotations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation, _impl_.arrival_times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::GeneratedLineAndRotation, _impl_.departure_times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.arrival_times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.departure_times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.starting_earliness_tardiness_costs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.arrival_earliness_tardiness_costs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.maximum_number_vehicles_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.vehicles_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LineRotation, _impl_.fixed_price_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _impl_.maximum_earliness_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _impl_.maximum_tardiness_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _impl_.earliness_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardiness, _impl_.tardiness_cost_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.current_position_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.refrigerated_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.capacities_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.pricing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Vehicle, _impl_.allowed_for_generated_routes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Hub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Hub, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Hub, _impl_.opening_times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Hub, _impl_.cross_docking_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Hub, _impl_.cross_docking_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::CrossDockingCapacity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::CrossDockingCapacity, _impl_.capacity_per_hour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::CrossDockingTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::CrossDockingTime, _impl_.time_constant_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::CrossDockingTime, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DistanceMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DistanceMatrixEntry, _impl_.source_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DistanceMatrixEntry, _impl_.destination_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::DistanceMatrixEntry, _impl_.weights_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.parcel_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.source_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.destination_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.departure_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.arrival_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.arrival_earliness_tardiness_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.must_be_refrigerated_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.revenue_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Parcel, _impl_.size_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.parcel_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.path_segments_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.departure_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.arrival_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.incurred_penalties_from_arrival_time_per_minute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.cost_constant_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::ParcelRoute, _impl_.fingerprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::Path, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IncompletePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::IncompletePath, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _impl_.source_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _impl_.destination_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _impl_.line_rotation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::PathSegment, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.path_segment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.arrival_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.departure_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.segment_cost_constant_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.segment_cost_due_to_vehicle_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.segment_cost_due_to_departure_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.segment_cost_due_to_arrival_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::AnnotatedPathSegment, _impl_.is_committed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardinessCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardinessCost, _impl_.earliness_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::EarlinessTardinessCost, _impl_.tardiness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.line_rotation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.used_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.source_hub_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle, _impl_.destination_hub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState, _impl_.routed_parcels_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState, _impl_.parcel_routes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LogisticsNetworkState, _impl_.used_capacity_in_vehicle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError_FieldReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError_FieldReference, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError_FieldReference, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError_FieldReference, _impl_.sub_field_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError_FieldReference, _impl_.index_or_key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::operations_research::lattle::LattleValidationError, _impl_.offending_values_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::lattle::DateTimeRange)},
  { 8, 16, -1, sizeof(::operations_research::lattle::IntegerRange)},
  { 18, -1, -1, sizeof(::operations_research::lattle::Function1D)},
  { 27, -1, -1, sizeof(::operations_research::lattle::PricingStrategy)},
  { 35, 43, -1, sizeof(::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::operations_research::lattle::SeparableNDFunction)},
  { 53, -1, -1, sizeof(::operations_research::lattle::ValueDimension)},
  { 61, -1, -1, sizeof(::operations_research::lattle::PieceWiseAffineFunction)},
  { 68, -1, -1, sizeof(::operations_research::lattle::PieceWiseAffineSegment)},
  { 78, 86, -1, sizeof(::operations_research::lattle::Instance_ParcelsEntry_DoNotUse)},
  { 88, -1, -1, sizeof(::operations_research::lattle::Instance)},
  { 96, 104, -1, sizeof(::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse)},
  { 106, 114, -1, sizeof(::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse)},
  { 116, 124, -1, sizeof(::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse)},
  { 126, -1, -1, sizeof(::operations_research::lattle::LogisticsNetwork)},
  { 141, 149, -1, sizeof(::operations_research::lattle::Line_NextRotationsEntry_DoNotUse)},
  { 151, -1, -1, sizeof(::operations_research::lattle::Line)},
  { 159, 167, -1, sizeof(::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse)},
  { 169, 177, -1, sizeof(::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse)},
  { 179, -1, -1, sizeof(::operations_research::lattle::GeneratedLineAndRotation)},
  { 187, 195, -1, sizeof(::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse)},
  { 197, 205, -1, sizeof(::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse)},
  { 207, 215, -1, sizeof(::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse)},
  { 217, 225, -1, sizeof(::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse)},
  { 227, 240, -1, sizeof(::operations_research::lattle::LineRotation)},
  { 247, 257, -1, sizeof(::operations_research::lattle::EarlinessTardiness)},
  { 261, 273, -1, sizeof(::operations_research::lattle::Vehicle)},
  { 279, -1, -1, sizeof(::operations_research::lattle::Hub)},
  { 289, -1, -1, sizeof(::operations_research::lattle::CrossDockingCapacity)},
  { 296, -1, -1, sizeof(::operations_research::lattle::CrossDockingTime)},
  { 304, -1, -1, sizeof(::operations_research::lattle::DistanceMatrixEntry)},
  { 313, 328, -1, sizeof(::operations_research::lattle::Parcel)},
  { 337, 345, -1, sizeof(::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse)},
  { 347, -1, -1, sizeof(::operations_research::lattle::ParcelRoute)},
  { 361, -1, -1, sizeof(::operations_research::lattle::Path)},
  { 368, -1, -1, sizeof(::operations_research::lattle::IncompletePath)},
  { 375, -1, -1, sizeof(::operations_research::lattle::PathSegment)},
  { 386, 394, -1, sizeof(::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse)},
  { 396, -1, -1, sizeof(::operations_research::lattle::AnnotatedPathSegment)},
  { 410, -1, -1, sizeof(::operations_research::lattle::EarlinessTardinessCost)},
  { 418, -1, -1, sizeof(::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle)},
  { 430, -1, -1, sizeof(::operations_research::lattle::LogisticsNetworkState)},
  { 440, -1, -1, sizeof(::operations_research::lattle::LattleValidationError_FieldReference)},
  { 451, 461, -1, sizeof(::operations_research::lattle::LattleValidationError)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::lattle::_DateTimeRange_default_instance_._instance,
  &::operations_research::lattle::_IntegerRange_default_instance_._instance,
  &::operations_research::lattle::_Function1D_default_instance_._instance,
  &::operations_research::lattle::_PricingStrategy_default_instance_._instance,
  &::operations_research::lattle::_SeparableNDFunction_ComponentsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_SeparableNDFunction_default_instance_._instance,
  &::operations_research::lattle::_ValueDimension_default_instance_._instance,
  &::operations_research::lattle::_PieceWiseAffineFunction_default_instance_._instance,
  &::operations_research::lattle::_PieceWiseAffineSegment_default_instance_._instance,
  &::operations_research::lattle::_Instance_ParcelsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_Instance_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetwork_LinesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetwork_VehiclesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetwork_HubsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetwork_default_instance_._instance,
  &::operations_research::lattle::_Line_NextRotationsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_Line_default_instance_._instance,
  &::operations_research::lattle::_GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_GeneratedLineAndRotation_default_instance_._instance,
  &::operations_research::lattle::_LineRotation_ArrivalTimesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LineRotation_DepartureTimesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_LineRotation_default_instance_._instance,
  &::operations_research::lattle::_EarlinessTardiness_default_instance_._instance,
  &::operations_research::lattle::_Vehicle_default_instance_._instance,
  &::operations_research::lattle::_Hub_default_instance_._instance,
  &::operations_research::lattle::_CrossDockingCapacity_default_instance_._instance,
  &::operations_research::lattle::_CrossDockingTime_default_instance_._instance,
  &::operations_research::lattle::_DistanceMatrixEntry_default_instance_._instance,
  &::operations_research::lattle::_Parcel_default_instance_._instance,
  &::operations_research::lattle::_ParcelRoute_CostEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_ParcelRoute_default_instance_._instance,
  &::operations_research::lattle::_Path_default_instance_._instance,
  &::operations_research::lattle::_IncompletePath_default_instance_._instance,
  &::operations_research::lattle::_PathSegment_default_instance_._instance,
  &::operations_research::lattle::_AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse_default_instance_._instance,
  &::operations_research::lattle::_AnnotatedPathSegment_default_instance_._instance,
  &::operations_research::lattle::_EarlinessTardinessCost_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetworkState_UsedCapacityInVehicle_default_instance_._instance,
  &::operations_research::lattle::_LogisticsNetworkState_default_instance_._instance,
  &::operations_research::lattle::_LattleValidationError_FieldReference_default_instance_._instance,
  &::operations_research::lattle::_LattleValidationError_default_instance_._instance,
};

const char descriptor_table_protodef_lattle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014lattle.proto\022\032operations_research.latt"
  "le\032\016resource.proto\032\024field_behavior.proto"
  "\032\036google/protobuf/duration.proto\032\016dateti"
  "me.proto\032\014latlng.proto\032\014int128.proto\"d\n\r"
  "DateTimeRange\022)\n\nfirst_date\030\001 \001(\0132\025.goog"
  "le.type.DateTime\022(\n\tlast_date\030\002 \001(\0132\025.go"
  "ogle.type.DateTime\"^\n\014IntegerRange\022\030\n\013st"
  "art_value\030\001 \001(\005H\000\210\001\001\022\026\n\tend_value\030\002 \001(\005H"
  "\001\210\001\001B\016\n\014_start_valueB\014\n\n_end_value\"p\n\nFu"
  "nction1D\022\022\n\010constant\030\001 \001(\001H\000\022B\n\003pwl\030\002 \001("
  "\01323.operations_research.lattle.PieceWise"
  "AffineFunctionH\000B\n\n\010function\"k\n\017PricingS"
  "trategy\022D\n\tseparable\030\001 \001(\0132/.operations_"
  "research.lattle.SeparableNDFunctionH\000B\022\n"
  "\020pricing_strategy\"\335\001\n\023SeparableNDFunctio"
  "n\022S\n\ncomponents\030\001 \003(\0132\?.operations_resea"
  "rch.lattle.SeparableNDFunction.Component"
  "sEntry\022\026\n\016constant_price\030\002 \001(\001\032Y\n\017Compon"
  "entsEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&."
  "operations_research.lattle.Function1D:\0028"
  "\001\"2\n\016ValueDimension\022\r\n\005value\030\001 \001(\003\022\021\n\tdi"
  "mension\030\002 \001(\t\"_\n\027PieceWiseAffineFunction"
  "\022D\n\010segments\030\001 \003(\01322.operations_research"
  ".lattle.PieceWiseAffineSegment\"X\n\026PieceW"
  "iseAffineSegment\022\017\n\007start_x\030\001 \001(\001\022\017\n\007sta"
  "rt_y\030\002 \001(\001\022\r\n\005end_x\030\003 \001(\001\022\r\n\005end_y\030\004 \001(\001"
  "\"\341\001\n\010Instance\022=\n\007network\030\001 \001(\0132,.operati"
  "ons_research.lattle.LogisticsNetwork\022B\n\007"
  "parcels\030\002 \003(\01321.operations_research.latt"
  "le.Instance.ParcelsEntry\032R\n\014ParcelsEntry"
  "\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".operation"
  "s_research.lattle.Parcel:\0028\001\"\311\006\n\020Logisti"
  "csNetwork\022\014\n\004name\030\001 \001(\t\022F\n\005lines\030\002 \003(\01327"
  ".operations_research.lattle.LogisticsNet"
  "work.LinesEntry\022L\n\010vehicles\030\003 \003(\0132:.oper"
  "ations_research.lattle.LogisticsNetwork."
  "VehiclesEntry\022D\n\004hubs\030\004 \003(\01326.operations"
  "_research.lattle.LogisticsNetwork.HubsEn"
  "try\022>\n\ndimensions\030\005 \003(\0132*.operations_res"
  "earch.lattle.ValueDimension\022<\n\007pricing\030\006"
  " \001(\0132+.operations_research.lattle.Pricin"
  "gStrategy\022\025\n\rcurrency_code\030\007 \001(\t\022,\n\ttime"
  "_step\030\010 \001(\0132\031.google.protobuf.Duration\022H"
  "\n\017distance_matrix\030\t \003(\0132/.operations_res"
  "earch.lattle.DistanceMatrixEntry\032N\n\nLine"
  "sEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .ope"
  "rations_research.lattle.Line:\0028\001\032T\n\rVehi"
  "clesEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#."
  "operations_research.lattle.Vehicle:\0028\001\032L"
  "\n\tHubsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132"
  "\037.operations_research.lattle.Hub:\0028\001:J\352A"
  "G\n1optimizationai-pa.googleapis.com/Logi"
  "sticsNetwork\022\022networks/{network}\"\221\002\n\004Lin"
  "e\022\017\n\007hub_ids\030\001 \003(\t\022K\n\016next_rotations\030\002 \003"
  "(\01323.operations_research.lattle.Line.Nex"
  "tRotationsEntry\032^\n\022NextRotationsEntry\022\013\n"
  "\003key\030\001 \001(\t\0227\n\005value\030\002 \001(\0132(.operations_r"
  "esearch.lattle.LineRotation:\0028\001:K\352AH\n%op"
  "timizationai-pa.googleapis.com/Line\022\037net"
  "works/{network}/lines/{line}\"\366\002\n\030Generat"
  "edLineAndRotation\022]\n\rarrival_times\030\001 \003(\013"
  "2F.operations_research.lattle.GeneratedL"
  "ineAndRotation.ArrivalTimesEntry\022a\n\017depa"
  "rture_times\030\002 \003(\0132H.operations_research."
  "lattle.GeneratedLineAndRotation.Departur"
  "eTimesEntry\032J\n\021ArrivalTimesEntry\022\013\n\003key\030"
  "\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.google.type.DateT"
  "ime:\0028\001\032L\n\023DepartureTimesEntry\022\013\n\003key\030\001 "
  "\001(\t\022$\n\005value\030\002 \001(\0132\025.google.type.DateTim"
  "e:\0028\001\"\207\t\n\014LineRotation\022Q\n\rarrival_times\030"
  "\001 \003(\0132:.operations_research.lattle.LineR"
  "otation.ArrivalTimesEntry\022U\n\017departure_t"
  "imes\030\002 \003(\0132<.operations_research.lattle."
  "LineRotation.DepartureTimesEntry\022y\n\"star"
  "ting_earliness_tardiness_costs\030\003 \003(\0132M.o"
  "perations_research.lattle.LineRotation.S"
  "tartingEarlinessTardinessCostsEntry\022w\n!a"
  "rrival_earliness_tardiness_costs\030\004 \003(\0132L"
  ".operations_research.lattle.LineRotation"
  ".ArrivalEarlinessTardinessCostsEntry\022N\n\027"
  "maximum_number_vehicles\030\005 \001(\0132(.operatio"
  "ns_research.lattle.IntegerRangeH\000\210\001\001\022\020\n\010"
  "vehicles\030\006 \003(\t\022@\n\013fixed_price\030\007 \001(\0132+.op"
  "erations_research.lattle.PricingStrategy"
  "\032^\n\021ArrivalTimesEntry\022\013\n\003key\030\001 \001(\t\0228\n\005va"
  "lue\030\002 \001(\0132).operations_research.lattle.D"
  "ateTimeRange:\0028\001\032`\n\023DepartureTimesEntry\022"
  "\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\0132).operations"
  "_research.lattle.DateTimeRange:\0028\001\032v\n$St"
  "artingEarlinessTardinessCostsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022=\n\005value\030\002 \001(\0132..operations_rese"
  "arch.lattle.EarlinessTardiness:\0028\001\032u\n#Ar"
  "rivalEarlinessTardinessCostsEntry\022\013\n\003key"
  "\030\001 \001(\t\022=\n\005value\030\002 \001(\0132..operations_resea"
  "rch.lattle.EarlinessTardiness:\0028\001:h\352Ae\n-"
  "optimizationai-pa.googleapis.com/LineRot"
  "ation\0224networks/{network}/lines/{line}/r"
  "otations/{rotation}B\032\n\030_maximum_number_v"
  "ehicles\"\346\002\n\022EarlinessTardiness\0229\n\021maximu"
  "m_earliness\030\001 \001(\0132\031.google.protobuf.Dura"
  "tionH\000\210\001\001\0229\n\021maximum_tardiness\030\002 \001(\0132\031.g"
  "oogle.protobuf.DurationH\001\210\001\001\022C\n\016earlines"
  "s_cost\030\003 \001(\0132&.operations_research.lattl"
  "e.Function1DH\002\210\001\001\022C\n\016tardiness_cost\030\004 \001("
  "\0132&.operations_research.lattle.Function1"
  "DH\003\210\001\001B\024\n\022_maximum_earlinessB\024\n\022_maximum"
  "_tardinessB\021\n\017_earliness_costB\021\n\017_tardin"
  "ess_cost\"\220\003\n\007Vehicle\022!\n\024current_position"
  "_hub\030\001 \001(\tH\000\210\001\001\022\024\n\014refrigerated\030\002 \001(\010\022>\n"
  "\ncapacities\030\003 \003(\0132*.operations_research."
  "lattle.ValueDimension\0229\n\004cost\030\004 \001(\0132+.op"
  "erations_research.lattle.PricingStrategy"
  "\022<\n\007pricing\030\006 \001(\0132+.operations_research."
  "lattle.PricingStrategy\022$\n\034allowed_for_ge"
  "nerated_routes\030\007 \001(\010:T\352AQ\n(optimizationa"
  "i-pa.googleapis.com/Vehicle\022%networks/{n"
  "etwork}/vehicles/{vehicle}B\027\n\025_current_p"
  "osition_hub\"\324\002\n\003Hub\022%\n\010position\030\001 \001(\0132\023."
  "google.type.LatLng\022@\n\ropening_times\030\002 \003("
  "\0132).operations_research.lattle.DateTimeR"
  "ange\022P\n\026cross_docking_capacity\030\003 \001(\01320.o"
  "perations_research.lattle.CrossDockingCa"
  "pacity\022H\n\022cross_docking_time\030\004 \001(\0132,.ope"
  "rations_research.lattle.CrossDockingTime"
  ":H\352AE\n$optimizationai-pa.googleapis.com/"
  "Hub\022\035networks/{network}/hubs/{hub}\"]\n\024Cr"
  "ossDockingCapacity\022E\n\021capacity_per_hour\030"
  "\001 \003(\0132*.operations_research.lattle.Value"
  "Dimension\"\203\001\n\020CrossDockingTime\0220\n\rtime_c"
  "onstant\030\001 \001(\0132\031.google.protobuf.Duration"
  "\022=\n\004time\030\002 \001(\0132/.operations_research.lat"
  "tle.SeparableNDFunction\"\177\n\023DistanceMatri"
  "xEntry\022\022\n\nsource_hub\030\001 \001(\t\022\027\n\017destinatio"
  "n_hub\030\002 \001(\t\022;\n\007weights\030\003 \003(\0132*.operation"
  "s_research.lattle.ValueDimension\"\334\003\n\006Par"
  "cel\022\016\n\006parcel\030\001 \001(\t\022\022\n\nsource_hub\030\002 \001(\t\022"
  "\027\n\017destination_hub\030\003 \001(\t\022-\n\016departure_ti"
  "me\030\004 \001(\0132\025.google.type.DateTime\022\?\n\014arriv"
  "al_time\030\005 \001(\0132).operations_research.latt"
  "le.DateTimeRange\022X\n arrival_earliness_ta"
  "rdiness_cost\030\006 \001(\0132..operations_research"
  ".lattle.EarlinessTardiness\022\034\n\024must_be_re"
  "frigerated\030\007 \001(\010\022\024\n\007revenue\030\010 \001(\001H\000\210\001\001\0228"
  "\n\004size\030\t \003(\0132*.operations_research.lattl"
  "e.ValueDimension:Q\352AN\n\'optimizationai-pa"
  ".googleapis.com/Parcel\022#networks/{networ"
  "k}/parcels/{parcel}B\n\n\010_revenue\"\260\003\n\013Parc"
  "elRoute\022\016\n\006parcel\030\001 \001(\t\022G\n\rpath_segments"
  "\030\002 \003(\01320.operations_research.lattle.Anno"
  "tatedPathSegment\022-\n\016departure_time\030\003 \001(\013"
  "2\025.google.type.DateTime\022+\n\014arrival_time\030"
  "\004 \001(\0132\025.google.type.DateTime\0227\n/incurred"
  "_penalties_from_arrival_time_per_minute\030"
  "\005 \001(\001\022\025\n\rcost_constant\030\006 \001(\001\022\?\n\004cost\030\007 \003"
  "(\01321.operations_research.lattle.ParcelRo"
  "ute.CostEntry\022.\n\013fingerprint\030\010 \001(\0132\024.sto"
  "rage_util.Int128B\003\340A\003\032+\n\tCostEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"A\n\004Path\0229\n\010se"
  "gments\030\001 \003(\0132\'.operations_research.lattl"
  "e.PathSegment\"K\n\016IncompletePath\0229\n\010segme"
  "nts\030\001 \003(\0132\'.operations_research.lattle.P"
  "athSegment\"p\n\013PathSegment\022\022\n\nsource_hub\030"
  "\001 \001(\t\022\027\n\017destination_hub\030\002 \001(\t\022\014\n\004line\030\003"
  " \001(\t\022\025\n\rline_rotation\030\004 \001(\t\022\017\n\007vehicle\030\005"
  " \001(\t\"\346\003\n\024AnnotatedPathSegment\022=\n\014path_se"
  "gment\030\001 \001(\0132\'.operations_research.lattle"
  ".PathSegment\022+\n\014arrival_time\030\002 \001(\0132\025.goo"
  "gle.type.DateTime\022-\n\016departure_time\030\003 \001("
  "\0132\025.google.type.DateTime\022\035\n\025segment_cost"
  "_constant\030\004 \001(\001\022r\n\033segment_cost_due_to_v"
  "ehicle\030\005 \003(\0132M.operations_research.lattl"
  "e.AnnotatedPathSegment.SegmentCostDueToV"
  "ehicleEntry\022%\n\035segment_cost_due_to_depar"
  "ture\030\006 \001(\001\022#\n\033segment_cost_due_to_arriva"
  "l\030\007 \001(\001\022\024\n\014is_committed\030\010 \001(\010\032>\n\034Segment"
  "CostDueToVehicleEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\001:\0028\001\">\n\026EarlinessTardinessCost\022"
  "\021\n\tearliness\030\001 \001(\001\022\021\n\ttardiness\030\002 \001(\001\"\317\003"
  "\n\025LogisticsNetworkState\022\017\n\007network\030\001 \001(\t"
  "\022:\n\016routed_parcels\030\002 \003(\0132\".operations_re"
  "search.lattle.Parcel\022>\n\rparcel_routes\030\003 "
  "\003(\0132\'.operations_research.lattle.ParcelR"
  "oute\022i\n\030used_capacity_in_vehicle\030\004 \003(\0132G"
  ".operations_research.lattle.LogisticsNet"
  "workState.UsedCapacityInVehicle\032\275\001\n\025Used"
  "CapacityInVehicle\022\014\n\004line\030\001 \001(\t\022\025\n\rline_"
  "rotation\030\002 \001(\t\022A\n\rused_capacity\030\003 \003(\0132*."
  "operations_research.lattle.ValueDimensio"
  "n\022\017\n\007vehicle\030\004 \001(\t\022\022\n\nsource_hub\030\005 \001(\t\022\027"
  "\n\017destination_hub\030\006 \001(\t\"\265\n\n\025LattleValida"
  "tionError\022D\n\004code\030\001 \001(\01626.operations_res"
  "earch.lattle.LattleValidationError.Code\022"
  "O\n\005field\030\002 \001(\0132@.operations_research.lat"
  "tle.LattleValidationError.FieldReference"
  "\022\032\n\rerror_message\030\003 \001(\tH\000\210\001\001\022\035\n\020offendin"
  "g_values\030\004 \001(\tH\001\210\001\001\032\243\001\n\016FieldReference\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\005index\030\002 \001(\005H\000\022\r\n\003key\030\003 \001"
  "(\tH\000\022S\n\tsub_field\030\004 \001(\0132@.operations_res"
  "earch.lattle.LattleValidationError.Field"
  "ReferenceB\016\n\014index_or_key\"\374\006\n\004Code\022\025\n\021ER"
  "ROR_UNSPECIFIED\020\000\022\024\n\020VALIDATION_ERROR\020\002\022"
  "\035\n\030VALIDATION_TIMEOUT_ERROR\020\310\001\022*\n%VALIDA"
  "TION_OBJECT_ALREADY_INITIALIZED\020\311\001\022\033\n\027LO"
  "GISTICS_NETWORK_ERROR\020\004\022#\n\036LOGISTICS_NET"
  "WORK_NO_DIMENSION\020\220\003\022!\n\035LOGISTICS_NETWOR"
  "K_STATE_ERROR\020\006\022+\n&LOGISTICS_NETWORK_STA"
  "TE_INTERNAL_ERROR\020\330\004\022\031\n\025VALUE_DIMENSION_"
  "ERROR\020\010\022&\n!VALUE_DIMENSION_UNKNOWN_DIMEN"
  "SION\020\240\006\022\016\n\nLINE_ERROR\020\n\022\030\n\023LINE_NOT_IN_N"
  "ETWORK\020\350\007\022!\n\034LINE_ROTATION_NOT_IN_NETWOR"
  "K\020\351\007\022\035\n\030LINE_HUBS_NOT_IN_NETWORK\020\352\007\022+\n&L"
  "INE_ROTATION_WRONG_NUMBER_OF_ARRIVALS\020\353\007"
  "\022-\n(LINE_ROTATION_WRONG_NUMBER_OF_DEPART"
  "URES\020\354\007\022\"\n\035LINE_ROTATION_HUB_NOT_IN_LINE"
  "\020\355\007\0220\n+LINE_ROTATION_WRONG_ORDER_OF_HUBS"
  "_TIME_WISE\020\356\007\022\021\n\rVEHICLE_ERROR\020\014\022.\n)VEHI"
  "CLE_CAPACITY_DIMENSION_NOT_IN_NETWORK\020\260\t"
  "\022\031\n\025DISTANCE_MATRIX_ERROR\020\016\0224\n/DISTANCE_"
  "MATRIX_ENTRY_SOURCE_HUB_NOT_IN_NETWORK\020\370"
  "\n\0229\n4DISTANCE_MATRIX_ENTRY_DESTINATION_H"
  "UB_NOT_IN_NETWORK\020\371\n\022:\n5DISTANCE_MATRIX_"
  "ENTRY_WEIGHT_DIMENSION_NOT_IN_NETWORK\020\372\n"
  "B\020\n\016_error_messageB\023\n\021_offending_valuesB"
  "8\n\'com.google.operationsresearch.lattle."
  "v1B\013LattleProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_lattle_2eproto_deps[6] = {
  &::descriptor_table_datetime_2eproto,
  &::descriptor_table_field_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_int128_2eproto,
  &::descriptor_table_latlng_2eproto,
  &::descriptor_table_resource_2eproto,
};
static ::_pbi::once_flag descriptor_table_lattle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lattle_2eproto = {
    false, false, 8985, descriptor_table_protodef_lattle_2eproto,
    "lattle.proto",
    &descriptor_table_lattle_2eproto_once, descriptor_table_lattle_2eproto_deps, 6, 44,
    schemas, file_default_instances, TableStruct_lattle_2eproto::offsets,
    file_level_metadata_lattle_2eproto, file_level_enum_descriptors_lattle_2eproto,
    file_level_service_descriptors_lattle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lattle_2eproto_getter() {
  return &descriptor_table_lattle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lattle_2eproto(&descriptor_table_lattle_2eproto);
namespace operations_research {
namespace lattle {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LattleValidationError_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lattle_2eproto);
  return file_level_enum_descriptors_lattle_2eproto[0];
}
bool LattleValidationError_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 6:
    case 8:
    case 10:
    case 12:
    case 14:
    case 200:
    case 201:
    case 400:
    case 600:
    case 800:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1200:
    case 1400:
    case 1401:
    case 1402:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LattleValidationError_Code LattleValidationError::ERROR_UNSPECIFIED;
constexpr LattleValidationError_Code LattleValidationError::VALIDATION_ERROR;
constexpr LattleValidationError_Code LattleValidationError::VALIDATION_TIMEOUT_ERROR;
constexpr LattleValidationError_Code LattleValidationError::VALIDATION_OBJECT_ALREADY_INITIALIZED;
constexpr LattleValidationError_Code LattleValidationError::LOGISTICS_NETWORK_ERROR;
constexpr LattleValidationError_Code LattleValidationError::LOGISTICS_NETWORK_NO_DIMENSION;
constexpr LattleValidationError_Code LattleValidationError::LOGISTICS_NETWORK_STATE_ERROR;
constexpr LattleValidationError_Code LattleValidationError::LOGISTICS_NETWORK_STATE_INTERNAL_ERROR;
constexpr LattleValidationError_Code LattleValidationError::VALUE_DIMENSION_ERROR;
constexpr LattleValidationError_Code LattleValidationError::VALUE_DIMENSION_UNKNOWN_DIMENSION;
constexpr LattleValidationError_Code LattleValidationError::LINE_ERROR;
constexpr LattleValidationError_Code LattleValidationError::LINE_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::LINE_ROTATION_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::LINE_HUBS_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::LINE_ROTATION_WRONG_NUMBER_OF_ARRIVALS;
constexpr LattleValidationError_Code LattleValidationError::LINE_ROTATION_WRONG_NUMBER_OF_DEPARTURES;
constexpr LattleValidationError_Code LattleValidationError::LINE_ROTATION_HUB_NOT_IN_LINE;
constexpr LattleValidationError_Code LattleValidationError::LINE_ROTATION_WRONG_ORDER_OF_HUBS_TIME_WISE;
constexpr LattleValidationError_Code LattleValidationError::VEHICLE_ERROR;
constexpr LattleValidationError_Code LattleValidationError::VEHICLE_CAPACITY_DIMENSION_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::DISTANCE_MATRIX_ERROR;
constexpr LattleValidationError_Code LattleValidationError::DISTANCE_MATRIX_ENTRY_SOURCE_HUB_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::DISTANCE_MATRIX_ENTRY_DESTINATION_HUB_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::DISTANCE_MATRIX_ENTRY_WEIGHT_DIMENSION_NOT_IN_NETWORK;
constexpr LattleValidationError_Code LattleValidationError::Code_MIN;
constexpr LattleValidationError_Code LattleValidationError::Code_MAX;
constexpr int LattleValidationError::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DateTimeRange::_Internal {
 public:
  static const ::google::type::DateTime& first_date(const DateTimeRange* msg);
  static const ::google::type::DateTime& last_date(const DateTimeRange* msg);
};

const ::google::type::DateTime&
DateTimeRange::_Internal::first_date(const DateTimeRange* msg) {
  return *msg->_impl_.first_date_;
}
const ::google::type::DateTime&
DateTimeRange::_Internal::last_date(const DateTimeRange* msg) {
  return *msg->_impl_.last_date_;
}
void DateTimeRange::clear_first_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_date_ != nullptr) {
    delete _impl_.first_date_;
  }
  _impl_.first_date_ = nullptr;
}
void DateTimeRange::clear_last_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_date_ != nullptr) {
    delete _impl_.last_date_;
  }
  _impl_.last_date_ = nullptr;
}
DateTimeRange::DateTimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.DateTimeRange)
}
DateTimeRange::DateTimeRange(const DateTimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateTimeRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.first_date_){nullptr}
    , decltype(_impl_.last_date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_first_date()) {
    _this->_impl_.first_date_ = new ::google::type::DateTime(*from._impl_.first_date_);
  }
  if (from._internal_has_last_date()) {
    _this->_impl_.last_date_ = new ::google::type::DateTime(*from._impl_.last_date_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.DateTimeRange)
}

inline void DateTimeRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.first_date_){nullptr}
    , decltype(_impl_.last_date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DateTimeRange::~DateTimeRange() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.DateTimeRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateTimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.first_date_;
  if (this != internal_default_instance()) delete _impl_.last_date_;
}

void DateTimeRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateTimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.DateTimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.first_date_ != nullptr) {
    delete _impl_.first_date_;
  }
  _impl_.first_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_date_ != nullptr) {
    delete _impl_.last_date_;
  }
  _impl_.last_date_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTimeRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.type.DateTime first_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime last_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateTimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.DateTimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.DateTime first_date = 1;
  if (this->_internal_has_first_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::first_date(this),
        _Internal::first_date(this).GetCachedSize(), target, stream);
  }

  // .google.type.DateTime last_date = 2;
  if (this->_internal_has_last_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::last_date(this),
        _Internal::last_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.DateTimeRange)
  return target;
}

size_t DateTimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.DateTimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.type.DateTime first_date = 1;
  if (this->_internal_has_first_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_date_);
  }

  // .google.type.DateTime last_date = 2;
  if (this->_internal_has_last_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateTimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateTimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateTimeRange::GetClassData() const { return &_class_data_; }


void DateTimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateTimeRange*>(&to_msg);
  auto& from = static_cast<const DateTimeRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.DateTimeRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_first_date()) {
    _this->_internal_mutable_first_date()->::google::type::DateTime::MergeFrom(
        from._internal_first_date());
  }
  if (from._internal_has_last_date()) {
    _this->_internal_mutable_last_date()->::google::type::DateTime::MergeFrom(
        from._internal_last_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateTimeRange::CopyFrom(const DateTimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.DateTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeRange::IsInitialized() const {
  return true;
}

void DateTimeRange::InternalSwap(DateTimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTimeRange, _impl_.last_date_)
      + sizeof(DateTimeRange::_impl_.last_date_)
      - PROTOBUF_FIELD_OFFSET(DateTimeRange, _impl_.first_date_)>(
          reinterpret_cast<char*>(&_impl_.first_date_),
          reinterpret_cast<char*>(&other->_impl_.first_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTimeRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[0]);
}

// ===================================================================

class IntegerRange::_Internal {
 public:
  using HasBits = decltype(std::declval<IntegerRange>()._impl_._has_bits_);
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntegerRange::IntegerRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.IntegerRange)
}
IntegerRange::IntegerRange(const IntegerRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntegerRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_value_){}
    , decltype(_impl_.end_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_value_, &from._impl_.start_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_value_) -
    reinterpret_cast<char*>(&_impl_.start_value_)) + sizeof(_impl_.end_value_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.IntegerRange)
}

inline void IntegerRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_value_){0}
    , decltype(_impl_.end_value_){0}
  };
}

IntegerRange::~IntegerRange() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.IntegerRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntegerRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntegerRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntegerRange::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.IntegerRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.start_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_value_) -
        reinterpret_cast<char*>(&_impl_.start_value_)) + sizeof(_impl_.end_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 start_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_value(&has_bits);
          _impl_.start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_value(&has_bits);
          _impl_.end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegerRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.IntegerRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 start_value = 1;
  if (_internal_has_start_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_value(), target);
  }

  // optional int32 end_value = 2;
  if (_internal_has_end_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.IntegerRange)
  return target;
}

size_t IntegerRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.IntegerRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 start_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_value());
    }

    // optional int32 end_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntegerRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntegerRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntegerRange::GetClassData() const { return &_class_data_; }


void IntegerRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntegerRange*>(&to_msg);
  auto& from = static_cast<const IntegerRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.IntegerRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_value_ = from._impl_.start_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_value_ = from._impl_.end_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntegerRange::CopyFrom(const IntegerRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.IntegerRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerRange::IsInitialized() const {
  return true;
}

void IntegerRange::InternalSwap(IntegerRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegerRange, _impl_.end_value_)
      + sizeof(IntegerRange::_impl_.end_value_)
      - PROTOBUF_FIELD_OFFSET(IntegerRange, _impl_.start_value_)>(
          reinterpret_cast<char*>(&_impl_.start_value_),
          reinterpret_cast<char*>(&other->_impl_.start_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[1]);
}

// ===================================================================

class Function1D::_Internal {
 public:
  static const ::operations_research::lattle::PieceWiseAffineFunction& pwl(const Function1D* msg);
};

const ::operations_research::lattle::PieceWiseAffineFunction&
Function1D::_Internal::pwl(const Function1D* msg) {
  return *msg->_impl_.function_.pwl_;
}
void Function1D::set_allocated_pwl(::operations_research::lattle::PieceWiseAffineFunction* pwl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (pwl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pwl);
    if (message_arena != submessage_arena) {
      pwl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pwl, submessage_arena);
    }
    set_has_pwl();
    _impl_.function_.pwl_ = pwl;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.lattle.Function1D.pwl)
}
Function1D::Function1D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Function1D)
}
Function1D::Function1D(const Function1D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Function1D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_function();
  switch (from.function_case()) {
    case kConstant: {
      _this->_internal_set_constant(from._internal_constant());
      break;
    }
    case kPwl: {
      _this->_internal_mutable_pwl()->::operations_research::lattle::PieceWiseAffineFunction::MergeFrom(
          from._internal_pwl());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Function1D)
}

inline void Function1D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_function();
}

Function1D::~Function1D() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Function1D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function1D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void Function1D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function1D::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.lattle.Function1D)
  switch (function_case()) {
    case kConstant: {
      // No need to clear
      break;
    }
    case kPwl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.function_.pwl_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FUNCTION_NOT_SET;
}


void Function1D::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Function1D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function1D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double constant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_constant(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.PieceWiseAffineFunction pwl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pwl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function1D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Function1D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double constant = 1;
  if (_internal_has_constant()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_constant(), target);
  }

  // .operations_research.lattle.PieceWiseAffineFunction pwl = 2;
  if (_internal_has_pwl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pwl(this),
        _Internal::pwl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Function1D)
  return target;
}

size_t Function1D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Function1D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (function_case()) {
    // double constant = 1;
    case kConstant: {
      total_size += 1 + 8;
      break;
    }
    // .operations_research.lattle.PieceWiseAffineFunction pwl = 2;
    case kPwl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.function_.pwl_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function1D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Function1D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function1D::GetClassData() const { return &_class_data_; }


void Function1D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Function1D*>(&to_msg);
  auto& from = static_cast<const Function1D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Function1D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.function_case()) {
    case kConstant: {
      _this->_internal_set_constant(from._internal_constant());
      break;
    }
    case kPwl: {
      _this->_internal_mutable_pwl()->::operations_research::lattle::PieceWiseAffineFunction::MergeFrom(
          from._internal_pwl());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function1D::CopyFrom(const Function1D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Function1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function1D::IsInitialized() const {
  return true;
}

void Function1D::InternalSwap(Function1D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.function_, other->_impl_.function_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Function1D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[2]);
}

// ===================================================================

class PricingStrategy::_Internal {
 public:
  static const ::operations_research::lattle::SeparableNDFunction& separable(const PricingStrategy* msg);
};

const ::operations_research::lattle::SeparableNDFunction&
PricingStrategy::_Internal::separable(const PricingStrategy* msg) {
  return *msg->_impl_.pricing_strategy_.separable_;
}
void PricingStrategy::set_allocated_separable(::operations_research::lattle::SeparableNDFunction* separable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pricing_strategy();
  if (separable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(separable);
    if (message_arena != submessage_arena) {
      separable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, separable, submessage_arena);
    }
    set_has_separable();
    _impl_.pricing_strategy_.separable_ = separable;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.lattle.PricingStrategy.separable)
}
PricingStrategy::PricingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.PricingStrategy)
}
PricingStrategy::PricingStrategy(const PricingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PricingStrategy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pricing_strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_pricing_strategy();
  switch (from.pricing_strategy_case()) {
    case kSeparable: {
      _this->_internal_mutable_separable()->::operations_research::lattle::SeparableNDFunction::MergeFrom(
          from._internal_separable());
      break;
    }
    case PRICING_STRATEGY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.PricingStrategy)
}

inline void PricingStrategy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pricing_strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_pricing_strategy();
}

PricingStrategy::~PricingStrategy() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.PricingStrategy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PricingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_pricing_strategy()) {
    clear_pricing_strategy();
  }
}

void PricingStrategy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PricingStrategy::clear_pricing_strategy() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.lattle.PricingStrategy)
  switch (pricing_strategy_case()) {
    case kSeparable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pricing_strategy_.separable_;
      }
      break;
    }
    case PRICING_STRATEGY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PRICING_STRATEGY_NOT_SET;
}


void PricingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.PricingStrategy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_pricing_strategy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PricingStrategy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.lattle.SeparableNDFunction separable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_separable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PricingStrategy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.PricingStrategy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.lattle.SeparableNDFunction separable = 1;
  if (_internal_has_separable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::separable(this),
        _Internal::separable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.PricingStrategy)
  return target;
}

size_t PricingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.PricingStrategy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (pricing_strategy_case()) {
    // .operations_research.lattle.SeparableNDFunction separable = 1;
    case kSeparable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pricing_strategy_.separable_);
      break;
    }
    case PRICING_STRATEGY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PricingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PricingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PricingStrategy::GetClassData() const { return &_class_data_; }


void PricingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PricingStrategy*>(&to_msg);
  auto& from = static_cast<const PricingStrategy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.PricingStrategy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.pricing_strategy_case()) {
    case kSeparable: {
      _this->_internal_mutable_separable()->::operations_research::lattle::SeparableNDFunction::MergeFrom(
          from._internal_separable());
      break;
    }
    case PRICING_STRATEGY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PricingStrategy::CopyFrom(const PricingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.PricingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PricingStrategy::IsInitialized() const {
  return true;
}

void PricingStrategy::InternalSwap(PricingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pricing_strategy_, other->_impl_.pricing_strategy_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PricingStrategy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[3]);
}

// ===================================================================

SeparableNDFunction_ComponentsEntry_DoNotUse::SeparableNDFunction_ComponentsEntry_DoNotUse() {}
SeparableNDFunction_ComponentsEntry_DoNotUse::SeparableNDFunction_ComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SeparableNDFunction_ComponentsEntry_DoNotUse::MergeFrom(const SeparableNDFunction_ComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SeparableNDFunction_ComponentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[4]);
}

// ===================================================================

class SeparableNDFunction::_Internal {
 public:
};

SeparableNDFunction::SeparableNDFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SeparableNDFunction::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.SeparableNDFunction)
}
SeparableNDFunction::SeparableNDFunction(const SeparableNDFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeparableNDFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.components_)*/{}
    , decltype(_impl_.constant_price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  _this->_impl_.constant_price_ = from._impl_.constant_price_;
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.SeparableNDFunction)
}

inline void SeparableNDFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.components_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.constant_price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeparableNDFunction::~SeparableNDFunction() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.SeparableNDFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SeparableNDFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.Destruct();
  _impl_.components_.~MapField();
}

void SeparableNDFunction::ArenaDtor(void* object) {
  SeparableNDFunction* _this = reinterpret_cast< SeparableNDFunction* >(object);
  _this->_impl_.components_.Destruct();
}
void SeparableNDFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeparableNDFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.SeparableNDFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  _impl_.constant_price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeparableNDFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .operations_research.lattle.Function1D> components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double constant_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.constant_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeparableNDFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.SeparableNDFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.Function1D> components = 1;
  if (!this->_internal_components().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::Function1D>;
    using WireHelper = SeparableNDFunction_ComponentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_components();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.SeparableNDFunction.ComponentsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // double constant_price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_constant_price = this->_internal_constant_price();
  uint64_t raw_constant_price;
  memcpy(&raw_constant_price, &tmp_constant_price, sizeof(tmp_constant_price));
  if (raw_constant_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_constant_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.SeparableNDFunction)
  return target;
}

size_t SeparableNDFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.SeparableNDFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.Function1D> components = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::Function1D >::const_iterator
      it = this->_internal_components().begin();
      it != this->_internal_components().end(); ++it) {
    total_size += SeparableNDFunction_ComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double constant_price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_constant_price = this->_internal_constant_price();
  uint64_t raw_constant_price;
  memcpy(&raw_constant_price, &tmp_constant_price, sizeof(tmp_constant_price));
  if (raw_constant_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeparableNDFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeparableNDFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeparableNDFunction::GetClassData() const { return &_class_data_; }


void SeparableNDFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeparableNDFunction*>(&to_msg);
  auto& from = static_cast<const SeparableNDFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.SeparableNDFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_constant_price = from._internal_constant_price();
  uint64_t raw_constant_price;
  memcpy(&raw_constant_price, &tmp_constant_price, sizeof(tmp_constant_price));
  if (raw_constant_price != 0) {
    _this->_internal_set_constant_price(from._internal_constant_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeparableNDFunction::CopyFrom(const SeparableNDFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.SeparableNDFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeparableNDFunction::IsInitialized() const {
  return true;
}

void SeparableNDFunction::InternalSwap(SeparableNDFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
  swap(_impl_.constant_price_, other->_impl_.constant_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeparableNDFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[5]);
}

// ===================================================================

class ValueDimension::_Internal {
 public:
};

ValueDimension::ValueDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.ValueDimension)
}
ValueDimension::ValueDimension(const ValueDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueDimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimension_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension().empty()) {
    _this->_impl_.dimension_.Set(from._internal_dimension(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.ValueDimension)
}

inline void ValueDimension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimension_){}
    , decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValueDimension::~ValueDimension() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.ValueDimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimension_.Destroy();
}

void ValueDimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.ValueDimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimension_.ClearToEmpty();
  _impl_.value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueDimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.ValueDimension.dimension"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueDimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.ValueDimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dimension().data(), static_cast<int>(this->_internal_dimension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.ValueDimension.dimension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.ValueDimension)
  return target;
}

size_t ValueDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.ValueDimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dimension());
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueDimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueDimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueDimension::GetClassData() const { return &_class_data_; }


void ValueDimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueDimension*>(&to_msg);
  auto& from = static_cast<const ValueDimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.ValueDimension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dimension().empty()) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueDimension::CopyFrom(const ValueDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.ValueDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueDimension::IsInitialized() const {
  return true;
}

void ValueDimension::InternalSwap(ValueDimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dimension_, lhs_arena,
      &other->_impl_.dimension_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueDimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[6]);
}

// ===================================================================

class PieceWiseAffineFunction::_Internal {
 public:
};

PieceWiseAffineFunction::PieceWiseAffineFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.PieceWiseAffineFunction)
}
PieceWiseAffineFunction::PieceWiseAffineFunction(const PieceWiseAffineFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PieceWiseAffineFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.PieceWiseAffineFunction)
}

inline void PieceWiseAffineFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PieceWiseAffineFunction::~PieceWiseAffineFunction() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.PieceWiseAffineFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PieceWiseAffineFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
}

void PieceWiseAffineFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PieceWiseAffineFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.PieceWiseAffineFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PieceWiseAffineFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.lattle.PieceWiseAffineSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PieceWiseAffineFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.PieceWiseAffineFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PieceWiseAffineSegment segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.PieceWiseAffineFunction)
  return target;
}

size_t PieceWiseAffineFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.PieceWiseAffineFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PieceWiseAffineSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PieceWiseAffineFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PieceWiseAffineFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PieceWiseAffineFunction::GetClassData() const { return &_class_data_; }


void PieceWiseAffineFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PieceWiseAffineFunction*>(&to_msg);
  auto& from = static_cast<const PieceWiseAffineFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.PieceWiseAffineFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PieceWiseAffineFunction::CopyFrom(const PieceWiseAffineFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.PieceWiseAffineFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PieceWiseAffineFunction::IsInitialized() const {
  return true;
}

void PieceWiseAffineFunction::InternalSwap(PieceWiseAffineFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PieceWiseAffineFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[7]);
}

// ===================================================================

class PieceWiseAffineSegment::_Internal {
 public:
};

PieceWiseAffineSegment::PieceWiseAffineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.PieceWiseAffineSegment)
}
PieceWiseAffineSegment::PieceWiseAffineSegment(const PieceWiseAffineSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PieceWiseAffineSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_x_){}
    , decltype(_impl_.start_y_){}
    , decltype(_impl_.end_x_){}
    , decltype(_impl_.end_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_x_, &from._impl_.start_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_y_) -
    reinterpret_cast<char*>(&_impl_.start_x_)) + sizeof(_impl_.end_y_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.PieceWiseAffineSegment)
}

inline void PieceWiseAffineSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_x_){0}
    , decltype(_impl_.start_y_){0}
    , decltype(_impl_.end_x_){0}
    , decltype(_impl_.end_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PieceWiseAffineSegment::~PieceWiseAffineSegment() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.PieceWiseAffineSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PieceWiseAffineSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PieceWiseAffineSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PieceWiseAffineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.PieceWiseAffineSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_y_) -
      reinterpret_cast<char*>(&_impl_.start_x_)) + sizeof(_impl_.end_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PieceWiseAffineSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double start_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double start_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PieceWiseAffineSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.PieceWiseAffineSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_x = this->_internal_start_x();
  uint64_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_x(), target);
  }

  // double start_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_y = this->_internal_start_y();
  uint64_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_y(), target);
  }

  // double end_x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_x = this->_internal_end_x();
  uint64_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_x(), target);
  }

  // double end_y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_y = this->_internal_end_y();
  uint64_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_end_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.PieceWiseAffineSegment)
  return target;
}

size_t PieceWiseAffineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.PieceWiseAffineSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_x = this->_internal_start_x();
  uint64_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    total_size += 1 + 8;
  }

  // double start_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_y = this->_internal_start_y();
  uint64_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    total_size += 1 + 8;
  }

  // double end_x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_x = this->_internal_end_x();
  uint64_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    total_size += 1 + 8;
  }

  // double end_y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_y = this->_internal_end_y();
  uint64_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PieceWiseAffineSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PieceWiseAffineSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PieceWiseAffineSegment::GetClassData() const { return &_class_data_; }


void PieceWiseAffineSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PieceWiseAffineSegment*>(&to_msg);
  auto& from = static_cast<const PieceWiseAffineSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.PieceWiseAffineSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_x = from._internal_start_x();
  uint64_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    _this->_internal_set_start_x(from._internal_start_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_y = from._internal_start_y();
  uint64_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    _this->_internal_set_start_y(from._internal_start_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_x = from._internal_end_x();
  uint64_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    _this->_internal_set_end_x(from._internal_end_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_y = from._internal_end_y();
  uint64_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    _this->_internal_set_end_y(from._internal_end_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PieceWiseAffineSegment::CopyFrom(const PieceWiseAffineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.PieceWiseAffineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PieceWiseAffineSegment::IsInitialized() const {
  return true;
}

void PieceWiseAffineSegment::InternalSwap(PieceWiseAffineSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PieceWiseAffineSegment, _impl_.end_y_)
      + sizeof(PieceWiseAffineSegment::_impl_.end_y_)
      - PROTOBUF_FIELD_OFFSET(PieceWiseAffineSegment, _impl_.start_x_)>(
          reinterpret_cast<char*>(&_impl_.start_x_),
          reinterpret_cast<char*>(&other->_impl_.start_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PieceWiseAffineSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[8]);
}

// ===================================================================

Instance_ParcelsEntry_DoNotUse::Instance_ParcelsEntry_DoNotUse() {}
Instance_ParcelsEntry_DoNotUse::Instance_ParcelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Instance_ParcelsEntry_DoNotUse::MergeFrom(const Instance_ParcelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Instance_ParcelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[9]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::operations_research::lattle::LogisticsNetwork& network(const Instance* msg);
};

const ::operations_research::lattle::LogisticsNetwork&
Instance::_Internal::network(const Instance* msg) {
  return *msg->_impl_.network_;
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Instance::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parcels_)*/{}
    , decltype(_impl_.network_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parcels_.MergeFrom(from._impl_.parcels_);
  if (from._internal_has_network()) {
    _this->_impl_.network_ = new ::operations_research::lattle::LogisticsNetwork(*from._impl_.network_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Instance)
}

inline void Instance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parcels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.network_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parcels_.Destruct();
  _impl_.parcels_.~MapField();
  if (this != internal_default_instance()) delete _impl_.network_;
}

void Instance::ArenaDtor(void* object) {
  Instance* _this = reinterpret_cast< Instance* >(object);
  _this->_impl_.parcels_.Destruct();
}
void Instance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parcels_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.network_ != nullptr) {
    delete _impl_.network_;
  }
  _impl_.network_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.lattle.LogisticsNetwork network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.Parcel> parcels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.parcels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.lattle.LogisticsNetwork network = 1;
  if (this->_internal_has_network()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::network(this),
        _Internal::network(this).GetCachedSize(), target, stream);
  }

  // map<string, .operations_research.lattle.Parcel> parcels = 2;
  if (!this->_internal_parcels().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::Parcel>;
    using WireHelper = Instance_ParcelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_parcels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.Instance.ParcelsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.Parcel> parcels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parcels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::Parcel >::const_iterator
      it = this->_internal_parcels().begin();
      it != this->_internal_parcels().end(); ++it) {
    total_size += Instance_ParcelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .operations_research.lattle.LogisticsNetwork network = 1;
  if (this->_internal_has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.network_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }


void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instance*>(&to_msg);
  auto& from = static_cast<const Instance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Instance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parcels_.MergeFrom(from._impl_.parcels_);
  if (from._internal_has_network()) {
    _this->_internal_mutable_network()->::operations_research::lattle::LogisticsNetwork::MergeFrom(
        from._internal_network());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parcels_.InternalSwap(&other->_impl_.parcels_);
  swap(_impl_.network_, other->_impl_.network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[10]);
}

// ===================================================================

LogisticsNetwork_LinesEntry_DoNotUse::LogisticsNetwork_LinesEntry_DoNotUse() {}
LogisticsNetwork_LinesEntry_DoNotUse::LogisticsNetwork_LinesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogisticsNetwork_LinesEntry_DoNotUse::MergeFrom(const LogisticsNetwork_LinesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetwork_LinesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[11]);
}

// ===================================================================

LogisticsNetwork_VehiclesEntry_DoNotUse::LogisticsNetwork_VehiclesEntry_DoNotUse() {}
LogisticsNetwork_VehiclesEntry_DoNotUse::LogisticsNetwork_VehiclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogisticsNetwork_VehiclesEntry_DoNotUse::MergeFrom(const LogisticsNetwork_VehiclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetwork_VehiclesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[12]);
}

// ===================================================================

LogisticsNetwork_HubsEntry_DoNotUse::LogisticsNetwork_HubsEntry_DoNotUse() {}
LogisticsNetwork_HubsEntry_DoNotUse::LogisticsNetwork_HubsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogisticsNetwork_HubsEntry_DoNotUse::MergeFrom(const LogisticsNetwork_HubsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetwork_HubsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[13]);
}

// ===================================================================

class LogisticsNetwork::_Internal {
 public:
  static const ::operations_research::lattle::PricingStrategy& pricing(const LogisticsNetwork* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_step(const LogisticsNetwork* msg);
};

const ::operations_research::lattle::PricingStrategy&
LogisticsNetwork::_Internal::pricing(const LogisticsNetwork* msg) {
  return *msg->_impl_.pricing_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
LogisticsNetwork::_Internal::time_step(const LogisticsNetwork* msg) {
  return *msg->_impl_.time_step_;
}
void LogisticsNetwork::clear_time_step() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_step_ != nullptr) {
    delete _impl_.time_step_;
  }
  _impl_.time_step_ = nullptr;
}
LogisticsNetwork::LogisticsNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LogisticsNetwork::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LogisticsNetwork)
}
LogisticsNetwork::LogisticsNetwork(const LogisticsNetwork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogisticsNetwork* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.lines_)*/{}
    , /*decltype(_impl_.vehicles_)*/{}
    , /*decltype(_impl_.hubs_)*/{}
    , decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , decltype(_impl_.distance_matrix_){from._impl_.distance_matrix_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.time_step_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_impl_.vehicles_.MergeFrom(from._impl_.vehicles_);
  _this->_impl_.hubs_.MergeFrom(from._impl_.hubs_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency_code().empty()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pricing()) {
    _this->_impl_.pricing_ = new ::operations_research::lattle::PricingStrategy(*from._impl_.pricing_);
  }
  if (from._internal_has_time_step()) {
    _this->_impl_.time_step_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_step_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LogisticsNetwork)
}

inline void LogisticsNetwork::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.lines_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.vehicles_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.hubs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.dimensions_){arena}
    , decltype(_impl_.distance_matrix_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.time_step_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogisticsNetwork::~LogisticsNetwork() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LogisticsNetwork)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LogisticsNetwork::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.Destruct();
  _impl_.lines_.~MapField();
  _impl_.vehicles_.Destruct();
  _impl_.vehicles_.~MapField();
  _impl_.hubs_.Destruct();
  _impl_.hubs_.~MapField();
  _impl_.dimensions_.~RepeatedPtrField();
  _impl_.distance_matrix_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.currency_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pricing_;
  if (this != internal_default_instance()) delete _impl_.time_step_;
}

void LogisticsNetwork::ArenaDtor(void* object) {
  LogisticsNetwork* _this = reinterpret_cast< LogisticsNetwork* >(object);
  _this->_impl_.lines_.Destruct();
  _this->_impl_.vehicles_.Destruct();
  _this->_impl_.hubs_.Destruct();
}
void LogisticsNetwork::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogisticsNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LogisticsNetwork)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _impl_.vehicles_.Clear();
  _impl_.hubs_.Clear();
  _impl_.dimensions_.Clear();
  _impl_.distance_matrix_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.currency_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pricing_ != nullptr) {
    delete _impl_.pricing_;
  }
  _impl_.pricing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_step_ != nullptr) {
    delete _impl_.time_step_;
  }
  _impl_.time_step_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogisticsNetwork::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetwork.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.Line> lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.lines_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.Vehicle> vehicles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.vehicles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.Hub> hubs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.hubs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ValueDimension dimensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.PricingStrategy pricing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pricing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currency_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetwork.currency_code"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_step = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.DistanceMatrixEntry distance_matrix = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distance_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogisticsNetwork::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LogisticsNetwork)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetwork.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .operations_research.lattle.Line> lines = 2;
  if (!this->_internal_lines().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::Line>;
    using WireHelper = LogisticsNetwork_LinesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_lines();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LogisticsNetwork.LinesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .operations_research.lattle.Vehicle> vehicles = 3;
  if (!this->_internal_vehicles().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::Vehicle>;
    using WireHelper = LogisticsNetwork_VehiclesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_vehicles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LogisticsNetwork.VehiclesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .operations_research.lattle.Hub> hubs = 4;
  if (!this->_internal_hubs().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::Hub>;
    using WireHelper = LogisticsNetwork_HubsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hubs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LogisticsNetwork.HubsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .operations_research.lattle.ValueDimension dimensions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.PricingStrategy pricing = 6;
  if (this->_internal_has_pricing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pricing(this),
        _Internal::pricing(this).GetCachedSize(), target, stream);
  }

  // string currency_code = 7;
  if (!this->_internal_currency_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetwork.currency_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_currency_code(), target);
  }

  // .google.protobuf.Duration time_step = 8;
  if (this->_internal_has_time_step()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::time_step(this),
        _Internal::time_step(this).GetCachedSize(), target, stream);
  }

  // repeated .operations_research.lattle.DistanceMatrixEntry distance_matrix = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_distance_matrix_size()); i < n; i++) {
    const auto& repfield = this->_internal_distance_matrix(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LogisticsNetwork)
  return target;
}

size_t LogisticsNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LogisticsNetwork)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.Line> lines = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lines_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::Line >::const_iterator
      it = this->_internal_lines().begin();
      it != this->_internal_lines().end(); ++it) {
    total_size += LogisticsNetwork_LinesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .operations_research.lattle.Vehicle> vehicles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vehicles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::Vehicle >::const_iterator
      it = this->_internal_vehicles().begin();
      it != this->_internal_vehicles().end(); ++it) {
    total_size += LogisticsNetwork_VehiclesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .operations_research.lattle.Hub> hubs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hubs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::Hub >::const_iterator
      it = this->_internal_hubs().begin();
      it != this->_internal_hubs().end(); ++it) {
    total_size += LogisticsNetwork_HubsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .operations_research.lattle.ValueDimension dimensions = 5;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_impl_.dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.lattle.DistanceMatrixEntry distance_matrix = 9;
  total_size += 1UL * this->_internal_distance_matrix_size();
  for (const auto& msg : this->_impl_.distance_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string currency_code = 7;
  if (!this->_internal_currency_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());
  }

  // .operations_research.lattle.PricingStrategy pricing = 6;
  if (this->_internal_has_pricing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pricing_);
  }

  // .google.protobuf.Duration time_step = 8;
  if (this->_internal_has_time_step()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_step_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogisticsNetwork::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogisticsNetwork::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogisticsNetwork::GetClassData() const { return &_class_data_; }


void LogisticsNetwork::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogisticsNetwork*>(&to_msg);
  auto& from = static_cast<const LogisticsNetwork&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LogisticsNetwork)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_impl_.vehicles_.MergeFrom(from._impl_.vehicles_);
  _this->_impl_.hubs_.MergeFrom(from._impl_.hubs_);
  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.distance_matrix_.MergeFrom(from._impl_.distance_matrix_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_currency_code().empty()) {
    _this->_internal_set_currency_code(from._internal_currency_code());
  }
  if (from._internal_has_pricing()) {
    _this->_internal_mutable_pricing()->::operations_research::lattle::PricingStrategy::MergeFrom(
        from._internal_pricing());
  }
  if (from._internal_has_time_step()) {
    _this->_internal_mutable_time_step()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogisticsNetwork::CopyFrom(const LogisticsNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LogisticsNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogisticsNetwork::IsInitialized() const {
  return true;
}

void LogisticsNetwork::InternalSwap(LogisticsNetwork* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
  _impl_.hubs_.InternalSwap(&other->_impl_.hubs_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.distance_matrix_.InternalSwap(&other->_impl_.distance_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogisticsNetwork, _impl_.time_step_)
      + sizeof(LogisticsNetwork::_impl_.time_step_)
      - PROTOBUF_FIELD_OFFSET(LogisticsNetwork, _impl_.pricing_)>(
          reinterpret_cast<char*>(&_impl_.pricing_),
          reinterpret_cast<char*>(&other->_impl_.pricing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetwork::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[14]);
}

// ===================================================================

Line_NextRotationsEntry_DoNotUse::Line_NextRotationsEntry_DoNotUse() {}
Line_NextRotationsEntry_DoNotUse::Line_NextRotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Line_NextRotationsEntry_DoNotUse::MergeFrom(const Line_NextRotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Line_NextRotationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[15]);
}

// ===================================================================

class Line::_Internal {
 public:
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Line::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hub_ids_){from._impl_.hub_ids_}
    , /*decltype(_impl_.next_rotations_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.next_rotations_.MergeFrom(from._impl_.next_rotations_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Line)
}

inline void Line::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hub_ids_){arena}
    , /*decltype(_impl_.next_rotations_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hub_ids_.~RepeatedPtrField();
  _impl_.next_rotations_.Destruct();
  _impl_.next_rotations_.~MapField();
}

void Line::ArenaDtor(void* object) {
  Line* _this = reinterpret_cast< Line* >(object);
  _this->_impl_.next_rotations_.Destruct();
}
void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hub_ids_.Clear();
  _impl_.next_rotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string hub_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hub_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.Line.hub_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.LineRotation> next_rotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.next_rotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hub_ids = 1;
  for (int i = 0, n = this->_internal_hub_ids_size(); i < n; i++) {
    const auto& s = this->_internal_hub_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.Line.hub_ids");
    target = stream->WriteString(1, s, target);
  }

  // map<string, .operations_research.lattle.LineRotation> next_rotations = 2;
  if (!this->_internal_next_rotations().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::LineRotation>;
    using WireHelper = Line_NextRotationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_next_rotations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.Line.NextRotationsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hub_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hub_ids_.size());
  for (int i = 0, n = _impl_.hub_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.hub_ids_.Get(i));
  }

  // map<string, .operations_research.lattle.LineRotation> next_rotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_next_rotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::LineRotation >::const_iterator
      it = this->_internal_next_rotations().begin();
      it != this->_internal_next_rotations().end(); ++it) {
    total_size += Line_NextRotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Line)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hub_ids_.MergeFrom(from._impl_.hub_ids_);
  _this->_impl_.next_rotations_.MergeFrom(from._impl_.next_rotations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hub_ids_.InternalSwap(&other->_impl_.hub_ids_);
  _impl_.next_rotations_.InternalSwap(&other->_impl_.next_rotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[16]);
}

// ===================================================================

GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse() {}
GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::MergeFrom(const GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[17]);
}

// ===================================================================

GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse() {}
GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::MergeFrom(const GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[18]);
}

// ===================================================================

class GeneratedLineAndRotation::_Internal {
 public:
};

void GeneratedLineAndRotation::clear_arrival_times() {
  _impl_.arrival_times_.Clear();
}
void GeneratedLineAndRotation::clear_departure_times() {
  _impl_.departure_times_.Clear();
}
GeneratedLineAndRotation::GeneratedLineAndRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GeneratedLineAndRotation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.GeneratedLineAndRotation)
}
GeneratedLineAndRotation::GeneratedLineAndRotation(const GeneratedLineAndRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeneratedLineAndRotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.arrival_times_)*/{}
    , /*decltype(_impl_.departure_times_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.arrival_times_.MergeFrom(from._impl_.arrival_times_);
  _this->_impl_.departure_times_.MergeFrom(from._impl_.departure_times_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.GeneratedLineAndRotation)
}

inline void GeneratedLineAndRotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.arrival_times_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.departure_times_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GeneratedLineAndRotation::~GeneratedLineAndRotation() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.GeneratedLineAndRotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GeneratedLineAndRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arrival_times_.Destruct();
  _impl_.arrival_times_.~MapField();
  _impl_.departure_times_.Destruct();
  _impl_.departure_times_.~MapField();
}

void GeneratedLineAndRotation::ArenaDtor(void* object) {
  GeneratedLineAndRotation* _this = reinterpret_cast< GeneratedLineAndRotation* >(object);
  _this->_impl_.arrival_times_.Destruct();
  _this->_impl_.departure_times_.Destruct();
}
void GeneratedLineAndRotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeneratedLineAndRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.GeneratedLineAndRotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arrival_times_.Clear();
  _impl_.departure_times_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeneratedLineAndRotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .google.type.DateTime> arrival_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.arrival_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.type.DateTime> departure_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.departure_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeneratedLineAndRotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.GeneratedLineAndRotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.type.DateTime> arrival_times = 1;
  if (!this->_internal_arrival_times().empty()) {
    using MapType = ::_pb::Map<std::string, ::google::type::DateTime>;
    using WireHelper = GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_arrival_times();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.GeneratedLineAndRotation.ArrivalTimesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .google.type.DateTime> departure_times = 2;
  if (!this->_internal_departure_times().empty()) {
    using MapType = ::_pb::Map<std::string, ::google::type::DateTime>;
    using WireHelper = GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_departure_times();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.GeneratedLineAndRotation.DepartureTimesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.GeneratedLineAndRotation)
  return target;
}

size_t GeneratedLineAndRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.GeneratedLineAndRotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.type.DateTime> arrival_times = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arrival_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::type::DateTime >::const_iterator
      it = this->_internal_arrival_times().begin();
      it != this->_internal_arrival_times().end(); ++it) {
    total_size += GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.type.DateTime> departure_times = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_departure_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::type::DateTime >::const_iterator
      it = this->_internal_departure_times().begin();
      it != this->_internal_departure_times().end(); ++it) {
    total_size += GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeneratedLineAndRotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeneratedLineAndRotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeneratedLineAndRotation::GetClassData() const { return &_class_data_; }


void GeneratedLineAndRotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeneratedLineAndRotation*>(&to_msg);
  auto& from = static_cast<const GeneratedLineAndRotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.GeneratedLineAndRotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arrival_times_.MergeFrom(from._impl_.arrival_times_);
  _this->_impl_.departure_times_.MergeFrom(from._impl_.departure_times_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeneratedLineAndRotation::CopyFrom(const GeneratedLineAndRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.GeneratedLineAndRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratedLineAndRotation::IsInitialized() const {
  return true;
}

void GeneratedLineAndRotation::InternalSwap(GeneratedLineAndRotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arrival_times_.InternalSwap(&other->_impl_.arrival_times_);
  _impl_.departure_times_.InternalSwap(&other->_impl_.departure_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratedLineAndRotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[19]);
}

// ===================================================================

LineRotation_ArrivalTimesEntry_DoNotUse::LineRotation_ArrivalTimesEntry_DoNotUse() {}
LineRotation_ArrivalTimesEntry_DoNotUse::LineRotation_ArrivalTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LineRotation_ArrivalTimesEntry_DoNotUse::MergeFrom(const LineRotation_ArrivalTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LineRotation_ArrivalTimesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[20]);
}

// ===================================================================

LineRotation_DepartureTimesEntry_DoNotUse::LineRotation_DepartureTimesEntry_DoNotUse() {}
LineRotation_DepartureTimesEntry_DoNotUse::LineRotation_DepartureTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LineRotation_DepartureTimesEntry_DoNotUse::MergeFrom(const LineRotation_DepartureTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LineRotation_DepartureTimesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[21]);
}

// ===================================================================

LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse() {}
LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::MergeFrom(const LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[22]);
}

// ===================================================================

LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse() {}
LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::MergeFrom(const LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[23]);
}

// ===================================================================

class LineRotation::_Internal {
 public:
  using HasBits = decltype(std::declval<LineRotation>()._impl_._has_bits_);
  static const ::operations_research::lattle::IntegerRange& maximum_number_vehicles(const LineRotation* msg);
  static void set_has_maximum_number_vehicles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::lattle::PricingStrategy& fixed_price(const LineRotation* msg);
};

const ::operations_research::lattle::IntegerRange&
LineRotation::_Internal::maximum_number_vehicles(const LineRotation* msg) {
  return *msg->_impl_.maximum_number_vehicles_;
}
const ::operations_research::lattle::PricingStrategy&
LineRotation::_Internal::fixed_price(const LineRotation* msg) {
  return *msg->_impl_.fixed_price_;
}
LineRotation::LineRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LineRotation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LineRotation)
}
LineRotation::LineRotation(const LineRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineRotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.arrival_times_)*/{}
    , /*decltype(_impl_.departure_times_)*/{}
    , /*decltype(_impl_.starting_earliness_tardiness_costs_)*/{}
    , /*decltype(_impl_.arrival_earliness_tardiness_costs_)*/{}
    , decltype(_impl_.vehicles_){from._impl_.vehicles_}
    , decltype(_impl_.maximum_number_vehicles_){nullptr}
    , decltype(_impl_.fixed_price_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.arrival_times_.MergeFrom(from._impl_.arrival_times_);
  _this->_impl_.departure_times_.MergeFrom(from._impl_.departure_times_);
  _this->_impl_.starting_earliness_tardiness_costs_.MergeFrom(from._impl_.starting_earliness_tardiness_costs_);
  _this->_impl_.arrival_earliness_tardiness_costs_.MergeFrom(from._impl_.arrival_earliness_tardiness_costs_);
  if (from._internal_has_maximum_number_vehicles()) {
    _this->_impl_.maximum_number_vehicles_ = new ::operations_research::lattle::IntegerRange(*from._impl_.maximum_number_vehicles_);
  }
  if (from._internal_has_fixed_price()) {
    _this->_impl_.fixed_price_ = new ::operations_research::lattle::PricingStrategy(*from._impl_.fixed_price_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LineRotation)
}

inline void LineRotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.arrival_times_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.departure_times_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.starting_earliness_tardiness_costs_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.arrival_earliness_tardiness_costs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.vehicles_){arena}
    , decltype(_impl_.maximum_number_vehicles_){nullptr}
    , decltype(_impl_.fixed_price_){nullptr}
  };
}

LineRotation::~LineRotation() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LineRotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LineRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arrival_times_.Destruct();
  _impl_.arrival_times_.~MapField();
  _impl_.departure_times_.Destruct();
  _impl_.departure_times_.~MapField();
  _impl_.starting_earliness_tardiness_costs_.Destruct();
  _impl_.starting_earliness_tardiness_costs_.~MapField();
  _impl_.arrival_earliness_tardiness_costs_.Destruct();
  _impl_.arrival_earliness_tardiness_costs_.~MapField();
  _impl_.vehicles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.maximum_number_vehicles_;
  if (this != internal_default_instance()) delete _impl_.fixed_price_;
}

void LineRotation::ArenaDtor(void* object) {
  LineRotation* _this = reinterpret_cast< LineRotation* >(object);
  _this->_impl_.arrival_times_.Destruct();
  _this->_impl_.departure_times_.Destruct();
  _this->_impl_.starting_earliness_tardiness_costs_.Destruct();
  _this->_impl_.arrival_earliness_tardiness_costs_.Destruct();
}
void LineRotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LineRotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arrival_times_.Clear();
  _impl_.departure_times_.Clear();
  _impl_.starting_earliness_tardiness_costs_.Clear();
  _impl_.arrival_earliness_tardiness_costs_.Clear();
  _impl_.vehicles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.maximum_number_vehicles_ != nullptr);
    _impl_.maximum_number_vehicles_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.fixed_price_ != nullptr) {
    delete _impl_.fixed_price_;
  }
  _impl_.fixed_price_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineRotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .operations_research.lattle.DateTimeRange> arrival_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.arrival_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.DateTimeRange> departure_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.departure_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.EarlinessTardiness> starting_earliness_tardiness_costs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.starting_earliness_tardiness_costs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .operations_research.lattle.EarlinessTardiness> arrival_earliness_tardiness_costs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.arrival_earliness_tardiness_costs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.lattle.IntegerRange maximum_number_vehicles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum_number_vehicles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string vehicles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vehicles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LineRotation.vehicles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.PricingStrategy fixed_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineRotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LineRotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.DateTimeRange> arrival_times = 1;
  if (!this->_internal_arrival_times().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::DateTimeRange>;
    using WireHelper = LineRotation_ArrivalTimesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_arrival_times();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LineRotation.ArrivalTimesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .operations_research.lattle.DateTimeRange> departure_times = 2;
  if (!this->_internal_departure_times().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::DateTimeRange>;
    using WireHelper = LineRotation_DepartureTimesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_departure_times();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LineRotation.DepartureTimesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .operations_research.lattle.EarlinessTardiness> starting_earliness_tardiness_costs = 3;
  if (!this->_internal_starting_earliness_tardiness_costs().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::EarlinessTardiness>;
    using WireHelper = LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_starting_earliness_tardiness_costs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LineRotation.StartingEarlinessTardinessCostsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .operations_research.lattle.EarlinessTardiness> arrival_earliness_tardiness_costs = 4;
  if (!this->_internal_arrival_earliness_tardiness_costs().empty()) {
    using MapType = ::_pb::Map<std::string, ::operations_research::lattle::EarlinessTardiness>;
    using WireHelper = LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_arrival_earliness_tardiness_costs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.LineRotation.ArrivalEarlinessTardinessCostsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .operations_research.lattle.IntegerRange maximum_number_vehicles = 5;
  if (_internal_has_maximum_number_vehicles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::maximum_number_vehicles(this),
        _Internal::maximum_number_vehicles(this).GetCachedSize(), target, stream);
  }

  // repeated string vehicles = 6;
  for (int i = 0, n = this->_internal_vehicles_size(); i < n; i++) {
    const auto& s = this->_internal_vehicles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LineRotation.vehicles");
    target = stream->WriteString(6, s, target);
  }

  // .operations_research.lattle.PricingStrategy fixed_price = 7;
  if (this->_internal_has_fixed_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fixed_price(this),
        _Internal::fixed_price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LineRotation)
  return target;
}

size_t LineRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LineRotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .operations_research.lattle.DateTimeRange> arrival_times = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arrival_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::DateTimeRange >::const_iterator
      it = this->_internal_arrival_times().begin();
      it != this->_internal_arrival_times().end(); ++it) {
    total_size += LineRotation_ArrivalTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .operations_research.lattle.DateTimeRange> departure_times = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_departure_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::DateTimeRange >::const_iterator
      it = this->_internal_departure_times().begin();
      it != this->_internal_departure_times().end(); ++it) {
    total_size += LineRotation_DepartureTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .operations_research.lattle.EarlinessTardiness> starting_earliness_tardiness_costs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_starting_earliness_tardiness_costs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::EarlinessTardiness >::const_iterator
      it = this->_internal_starting_earliness_tardiness_costs().begin();
      it != this->_internal_starting_earliness_tardiness_costs().end(); ++it) {
    total_size += LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .operations_research.lattle.EarlinessTardiness> arrival_earliness_tardiness_costs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arrival_earliness_tardiness_costs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::operations_research::lattle::EarlinessTardiness >::const_iterator
      it = this->_internal_arrival_earliness_tardiness_costs().begin();
      it != this->_internal_arrival_earliness_tardiness_costs().end(); ++it) {
    total_size += LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string vehicles = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vehicles_.size());
  for (int i = 0, n = _impl_.vehicles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vehicles_.Get(i));
  }

  // optional .operations_research.lattle.IntegerRange maximum_number_vehicles = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maximum_number_vehicles_);
  }

  // .operations_research.lattle.PricingStrategy fixed_price = 7;
  if (this->_internal_has_fixed_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fixed_price_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineRotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineRotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineRotation::GetClassData() const { return &_class_data_; }


void LineRotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineRotation*>(&to_msg);
  auto& from = static_cast<const LineRotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LineRotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arrival_times_.MergeFrom(from._impl_.arrival_times_);
  _this->_impl_.departure_times_.MergeFrom(from._impl_.departure_times_);
  _this->_impl_.starting_earliness_tardiness_costs_.MergeFrom(from._impl_.starting_earliness_tardiness_costs_);
  _this->_impl_.arrival_earliness_tardiness_costs_.MergeFrom(from._impl_.arrival_earliness_tardiness_costs_);
  _this->_impl_.vehicles_.MergeFrom(from._impl_.vehicles_);
  if (from._internal_has_maximum_number_vehicles()) {
    _this->_internal_mutable_maximum_number_vehicles()->::operations_research::lattle::IntegerRange::MergeFrom(
        from._internal_maximum_number_vehicles());
  }
  if (from._internal_has_fixed_price()) {
    _this->_internal_mutable_fixed_price()->::operations_research::lattle::PricingStrategy::MergeFrom(
        from._internal_fixed_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineRotation::CopyFrom(const LineRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LineRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRotation::IsInitialized() const {
  return true;
}

void LineRotation::InternalSwap(LineRotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arrival_times_.InternalSwap(&other->_impl_.arrival_times_);
  _impl_.departure_times_.InternalSwap(&other->_impl_.departure_times_);
  _impl_.starting_earliness_tardiness_costs_.InternalSwap(&other->_impl_.starting_earliness_tardiness_costs_);
  _impl_.arrival_earliness_tardiness_costs_.InternalSwap(&other->_impl_.arrival_earliness_tardiness_costs_);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineRotation, _impl_.fixed_price_)
      + sizeof(LineRotation::_impl_.fixed_price_)
      - PROTOBUF_FIELD_OFFSET(LineRotation, _impl_.maximum_number_vehicles_)>(
          reinterpret_cast<char*>(&_impl_.maximum_number_vehicles_),
          reinterpret_cast<char*>(&other->_impl_.maximum_number_vehicles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineRotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[24]);
}

// ===================================================================

class EarlinessTardiness::_Internal {
 public:
  using HasBits = decltype(std::declval<EarlinessTardiness>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& maximum_earliness(const EarlinessTardiness* msg);
  static void set_has_maximum_earliness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& maximum_tardiness(const EarlinessTardiness* msg);
  static void set_has_maximum_tardiness(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::lattle::Function1D& earliness_cost(const EarlinessTardiness* msg);
  static void set_has_earliness_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::operations_research::lattle::Function1D& tardiness_cost(const EarlinessTardiness* msg);
  static void set_has_tardiness_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
EarlinessTardiness::_Internal::maximum_earliness(const EarlinessTardiness* msg) {
  return *msg->_impl_.maximum_earliness_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
EarlinessTardiness::_Internal::maximum_tardiness(const EarlinessTardiness* msg) {
  return *msg->_impl_.maximum_tardiness_;
}
const ::operations_research::lattle::Function1D&
EarlinessTardiness::_Internal::earliness_cost(const EarlinessTardiness* msg) {
  return *msg->_impl_.earliness_cost_;
}
const ::operations_research::lattle::Function1D&
EarlinessTardiness::_Internal::tardiness_cost(const EarlinessTardiness* msg) {
  return *msg->_impl_.tardiness_cost_;
}
void EarlinessTardiness::clear_maximum_earliness() {
  if (_impl_.maximum_earliness_ != nullptr) _impl_.maximum_earliness_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EarlinessTardiness::clear_maximum_tardiness() {
  if (_impl_.maximum_tardiness_ != nullptr) _impl_.maximum_tardiness_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
EarlinessTardiness::EarlinessTardiness(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.EarlinessTardiness)
}
EarlinessTardiness::EarlinessTardiness(const EarlinessTardiness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EarlinessTardiness* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maximum_earliness_){nullptr}
    , decltype(_impl_.maximum_tardiness_){nullptr}
    , decltype(_impl_.earliness_cost_){nullptr}
    , decltype(_impl_.tardiness_cost_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maximum_earliness()) {
    _this->_impl_.maximum_earliness_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.maximum_earliness_);
  }
  if (from._internal_has_maximum_tardiness()) {
    _this->_impl_.maximum_tardiness_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.maximum_tardiness_);
  }
  if (from._internal_has_earliness_cost()) {
    _this->_impl_.earliness_cost_ = new ::operations_research::lattle::Function1D(*from._impl_.earliness_cost_);
  }
  if (from._internal_has_tardiness_cost()) {
    _this->_impl_.tardiness_cost_ = new ::operations_research::lattle::Function1D(*from._impl_.tardiness_cost_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.EarlinessTardiness)
}

inline void EarlinessTardiness::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maximum_earliness_){nullptr}
    , decltype(_impl_.maximum_tardiness_){nullptr}
    , decltype(_impl_.earliness_cost_){nullptr}
    , decltype(_impl_.tardiness_cost_){nullptr}
  };
}

EarlinessTardiness::~EarlinessTardiness() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.EarlinessTardiness)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EarlinessTardiness::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.maximum_earliness_;
  if (this != internal_default_instance()) delete _impl_.maximum_tardiness_;
  if (this != internal_default_instance()) delete _impl_.earliness_cost_;
  if (this != internal_default_instance()) delete _impl_.tardiness_cost_;
}

void EarlinessTardiness::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EarlinessTardiness::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.EarlinessTardiness)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.maximum_earliness_ != nullptr);
      _impl_.maximum_earliness_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.maximum_tardiness_ != nullptr);
      _impl_.maximum_tardiness_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.earliness_cost_ != nullptr);
      _impl_.earliness_cost_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tardiness_cost_ != nullptr);
      _impl_.tardiness_cost_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarlinessTardiness::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Duration maximum_earliness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum_earliness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration maximum_tardiness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum_tardiness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.lattle.Function1D earliness_cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_earliness_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.lattle.Function1D tardiness_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tardiness_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarlinessTardiness::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.EarlinessTardiness)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .google.protobuf.Duration maximum_earliness = 1;
  if (_internal_has_maximum_earliness()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::maximum_earliness(this),
        _Internal::maximum_earliness(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration maximum_tardiness = 2;
  if (_internal_has_maximum_tardiness()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maximum_tardiness(this),
        _Internal::maximum_tardiness(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.lattle.Function1D earliness_cost = 3;
  if (_internal_has_earliness_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::earliness_cost(this),
        _Internal::earliness_cost(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.lattle.Function1D tardiness_cost = 4;
  if (_internal_has_tardiness_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tardiness_cost(this),
        _Internal::tardiness_cost(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.EarlinessTardiness)
  return target;
}

size_t EarlinessTardiness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.EarlinessTardiness)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Duration maximum_earliness = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maximum_earliness_);
    }

    // optional .google.protobuf.Duration maximum_tardiness = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maximum_tardiness_);
    }

    // optional .operations_research.lattle.Function1D earliness_cost = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.earliness_cost_);
    }

    // optional .operations_research.lattle.Function1D tardiness_cost = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tardiness_cost_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarlinessTardiness::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EarlinessTardiness::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarlinessTardiness::GetClassData() const { return &_class_data_; }


void EarlinessTardiness::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EarlinessTardiness*>(&to_msg);
  auto& from = static_cast<const EarlinessTardiness&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.EarlinessTardiness)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_maximum_earliness()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_maximum_earliness());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_maximum_tardiness()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_maximum_tardiness());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_earliness_cost()->::operations_research::lattle::Function1D::MergeFrom(
          from._internal_earliness_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tardiness_cost()->::operations_research::lattle::Function1D::MergeFrom(
          from._internal_tardiness_cost());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarlinessTardiness::CopyFrom(const EarlinessTardiness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.EarlinessTardiness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarlinessTardiness::IsInitialized() const {
  return true;
}

void EarlinessTardiness::InternalSwap(EarlinessTardiness* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarlinessTardiness, _impl_.tardiness_cost_)
      + sizeof(EarlinessTardiness::_impl_.tardiness_cost_)
      - PROTOBUF_FIELD_OFFSET(EarlinessTardiness, _impl_.maximum_earliness_)>(
          reinterpret_cast<char*>(&_impl_.maximum_earliness_),
          reinterpret_cast<char*>(&other->_impl_.maximum_earliness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarlinessTardiness::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[25]);
}

// ===================================================================

class Vehicle::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle>()._impl_._has_bits_);
  static void set_has_current_position_hub(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::lattle::PricingStrategy& cost(const Vehicle* msg);
  static const ::operations_research::lattle::PricingStrategy& pricing(const Vehicle* msg);
};

const ::operations_research::lattle::PricingStrategy&
Vehicle::_Internal::cost(const Vehicle* msg) {
  return *msg->_impl_.cost_;
}
const ::operations_research::lattle::PricingStrategy&
Vehicle::_Internal::pricing(const Vehicle* msg) {
  return *msg->_impl_.pricing_;
}
Vehicle::Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.capacities_){from._impl_.capacities_}
    , decltype(_impl_.current_position_hub_){}
    , decltype(_impl_.cost_){nullptr}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.refrigerated_){}
    , decltype(_impl_.allowed_for_generated_routes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.current_position_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_position_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_position_hub()) {
    _this->_impl_.current_position_hub_.Set(from._internal_current_position_hub(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cost()) {
    _this->_impl_.cost_ = new ::operations_research::lattle::PricingStrategy(*from._impl_.cost_);
  }
  if (from._internal_has_pricing()) {
    _this->_impl_.pricing_ = new ::operations_research::lattle::PricingStrategy(*from._impl_.pricing_);
  }
  ::memcpy(&_impl_.refrigerated_, &from._impl_.refrigerated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allowed_for_generated_routes_) -
    reinterpret_cast<char*>(&_impl_.refrigerated_)) + sizeof(_impl_.allowed_for_generated_routes_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Vehicle)
}

inline void Vehicle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.capacities_){arena}
    , decltype(_impl_.current_position_hub_){}
    , decltype(_impl_.cost_){nullptr}
    , decltype(_impl_.pricing_){nullptr}
    , decltype(_impl_.refrigerated_){false}
    , decltype(_impl_.allowed_for_generated_routes_){false}
  };
  _impl_.current_position_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_position_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Vehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.capacities_.~RepeatedPtrField();
  _impl_.current_position_hub_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cost_;
  if (this != internal_default_instance()) delete _impl_.pricing_;
}

void Vehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Vehicle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capacities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.current_position_hub_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.cost_ != nullptr) {
    delete _impl_.cost_;
  }
  _impl_.cost_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pricing_ != nullptr) {
    delete _impl_.pricing_;
  }
  _impl_.pricing_ = nullptr;
  ::memset(&_impl_.refrigerated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allowed_for_generated_routes_) -
      reinterpret_cast<char*>(&_impl_.refrigerated_)) + sizeof(_impl_.allowed_for_generated_routes_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string current_position_hub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_current_position_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.Vehicle.current_position_hub"));
        } else
          goto handle_unusual;
        continue;
      // bool refrigerated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.refrigerated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ValueDimension capacities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capacities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.PricingStrategy cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.PricingStrategy pricing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pricing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allowed_for_generated_routes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.allowed_for_generated_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vehicle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Vehicle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string current_position_hub = 1;
  if (_internal_has_current_position_hub()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_position_hub().data(), static_cast<int>(this->_internal_current_position_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.Vehicle.current_position_hub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_position_hub(), target);
  }

  // bool refrigerated = 2;
  if (this->_internal_refrigerated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_refrigerated(), target);
  }

  // repeated .operations_research.lattle.ValueDimension capacities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_capacities_size()); i < n; i++) {
    const auto& repfield = this->_internal_capacities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.PricingStrategy cost = 4;
  if (this->_internal_has_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cost(this),
        _Internal::cost(this).GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.PricingStrategy pricing = 6;
  if (this->_internal_has_pricing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pricing(this),
        _Internal::pricing(this).GetCachedSize(), target, stream);
  }

  // bool allowed_for_generated_routes = 7;
  if (this->_internal_allowed_for_generated_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_allowed_for_generated_routes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Vehicle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension capacities = 3;
  total_size += 1UL * this->_internal_capacities_size();
  for (const auto& msg : this->_impl_.capacities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string current_position_hub = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_position_hub());
  }

  // .operations_research.lattle.PricingStrategy cost = 4;
  if (this->_internal_has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cost_);
  }

  // .operations_research.lattle.PricingStrategy pricing = 6;
  if (this->_internal_has_pricing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pricing_);
  }

  // bool refrigerated = 2;
  if (this->_internal_refrigerated() != 0) {
    total_size += 1 + 1;
  }

  // bool allowed_for_generated_routes = 7;
  if (this->_internal_allowed_for_generated_routes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vehicle::GetClassData() const { return &_class_data_; }


void Vehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vehicle*>(&to_msg);
  auto& from = static_cast<const Vehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Vehicle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.capacities_.MergeFrom(from._impl_.capacities_);
  if (from._internal_has_current_position_hub()) {
    _this->_internal_set_current_position_hub(from._internal_current_position_hub());
  }
  if (from._internal_has_cost()) {
    _this->_internal_mutable_cost()->::operations_research::lattle::PricingStrategy::MergeFrom(
        from._internal_cost());
  }
  if (from._internal_has_pricing()) {
    _this->_internal_mutable_pricing()->::operations_research::lattle::PricingStrategy::MergeFrom(
        from._internal_pricing());
  }
  if (from._internal_refrigerated() != 0) {
    _this->_internal_set_refrigerated(from._internal_refrigerated());
  }
  if (from._internal_allowed_for_generated_routes() != 0) {
    _this->_internal_set_allowed_for_generated_routes(from._internal_allowed_for_generated_routes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.capacities_.InternalSwap(&other->_impl_.capacities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_position_hub_, lhs_arena,
      &other->_impl_.current_position_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.allowed_for_generated_routes_)
      + sizeof(Vehicle::_impl_.allowed_for_generated_routes_)
      - PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.cost_)>(
          reinterpret_cast<char*>(&_impl_.cost_),
          reinterpret_cast<char*>(&other->_impl_.cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[26]);
}

// ===================================================================

class Hub::_Internal {
 public:
  static const ::google::type::LatLng& position(const Hub* msg);
  static const ::operations_research::lattle::CrossDockingCapacity& cross_docking_capacity(const Hub* msg);
  static const ::operations_research::lattle::CrossDockingTime& cross_docking_time(const Hub* msg);
};

const ::google::type::LatLng&
Hub::_Internal::position(const Hub* msg) {
  return *msg->_impl_.position_;
}
const ::operations_research::lattle::CrossDockingCapacity&
Hub::_Internal::cross_docking_capacity(const Hub* msg) {
  return *msg->_impl_.cross_docking_capacity_;
}
const ::operations_research::lattle::CrossDockingTime&
Hub::_Internal::cross_docking_time(const Hub* msg) {
  return *msg->_impl_.cross_docking_time_;
}
void Hub::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
Hub::Hub(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Hub)
}
Hub::Hub(const Hub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hub* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opening_times_){from._impl_.opening_times_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.cross_docking_capacity_){nullptr}
    , decltype(_impl_.cross_docking_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::google::type::LatLng(*from._impl_.position_);
  }
  if (from._internal_has_cross_docking_capacity()) {
    _this->_impl_.cross_docking_capacity_ = new ::operations_research::lattle::CrossDockingCapacity(*from._impl_.cross_docking_capacity_);
  }
  if (from._internal_has_cross_docking_time()) {
    _this->_impl_.cross_docking_time_ = new ::operations_research::lattle::CrossDockingTime(*from._impl_.cross_docking_time_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Hub)
}

inline void Hub::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opening_times_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.cross_docking_capacity_){nullptr}
    , decltype(_impl_.cross_docking_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Hub::~Hub() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Hub)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hub::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opening_times_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.cross_docking_capacity_;
  if (this != internal_default_instance()) delete _impl_.cross_docking_time_;
}

void Hub::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hub::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Hub)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opening_times_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cross_docking_capacity_ != nullptr) {
    delete _impl_.cross_docking_capacity_;
  }
  _impl_.cross_docking_capacity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cross_docking_time_ != nullptr) {
    delete _impl_.cross_docking_time_;
  }
  _impl_.cross_docking_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hub::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.type.LatLng position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.DateTimeRange opening_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opening_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.CrossDockingCapacity cross_docking_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_docking_capacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.CrossDockingTime cross_docking_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_docking_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hub::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Hub)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // repeated .operations_research.lattle.DateTimeRange opening_times = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opening_times_size()); i < n; i++) {
    const auto& repfield = this->_internal_opening_times(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.CrossDockingCapacity cross_docking_capacity = 3;
  if (this->_internal_has_cross_docking_capacity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cross_docking_capacity(this),
        _Internal::cross_docking_capacity(this).GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.CrossDockingTime cross_docking_time = 4;
  if (this->_internal_has_cross_docking_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cross_docking_time(this),
        _Internal::cross_docking_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Hub)
  return target;
}

size_t Hub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Hub)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.DateTimeRange opening_times = 2;
  total_size += 1UL * this->_internal_opening_times_size();
  for (const auto& msg : this->_impl_.opening_times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.type.LatLng position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .operations_research.lattle.CrossDockingCapacity cross_docking_capacity = 3;
  if (this->_internal_has_cross_docking_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cross_docking_capacity_);
  }

  // .operations_research.lattle.CrossDockingTime cross_docking_time = 4;
  if (this->_internal_has_cross_docking_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cross_docking_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hub::GetClassData() const { return &_class_data_; }


void Hub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hub*>(&to_msg);
  auto& from = static_cast<const Hub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Hub)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opening_times_.MergeFrom(from._impl_.opening_times_);
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::google::type::LatLng::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_cross_docking_capacity()) {
    _this->_internal_mutable_cross_docking_capacity()->::operations_research::lattle::CrossDockingCapacity::MergeFrom(
        from._internal_cross_docking_capacity());
  }
  if (from._internal_has_cross_docking_time()) {
    _this->_internal_mutable_cross_docking_time()->::operations_research::lattle::CrossDockingTime::MergeFrom(
        from._internal_cross_docking_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hub::CopyFrom(const Hub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Hub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hub::IsInitialized() const {
  return true;
}

void Hub::InternalSwap(Hub* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opening_times_.InternalSwap(&other->_impl_.opening_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hub, _impl_.cross_docking_time_)
      + sizeof(Hub::_impl_.cross_docking_time_)
      - PROTOBUF_FIELD_OFFSET(Hub, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hub::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[27]);
}

// ===================================================================

class CrossDockingCapacity::_Internal {
 public:
};

CrossDockingCapacity::CrossDockingCapacity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.CrossDockingCapacity)
}
CrossDockingCapacity::CrossDockingCapacity(const CrossDockingCapacity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossDockingCapacity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.capacity_per_hour_){from._impl_.capacity_per_hour_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.CrossDockingCapacity)
}

inline void CrossDockingCapacity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.capacity_per_hour_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CrossDockingCapacity::~CrossDockingCapacity() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.CrossDockingCapacity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossDockingCapacity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.capacity_per_hour_.~RepeatedPtrField();
}

void CrossDockingCapacity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossDockingCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.CrossDockingCapacity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capacity_per_hour_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossDockingCapacity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.lattle.ValueDimension capacity_per_hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capacity_per_hour(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossDockingCapacity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.CrossDockingCapacity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension capacity_per_hour = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_capacity_per_hour_size()); i < n; i++) {
    const auto& repfield = this->_internal_capacity_per_hour(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.CrossDockingCapacity)
  return target;
}

size_t CrossDockingCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.CrossDockingCapacity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension capacity_per_hour = 1;
  total_size += 1UL * this->_internal_capacity_per_hour_size();
  for (const auto& msg : this->_impl_.capacity_per_hour_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossDockingCapacity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossDockingCapacity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossDockingCapacity::GetClassData() const { return &_class_data_; }


void CrossDockingCapacity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossDockingCapacity*>(&to_msg);
  auto& from = static_cast<const CrossDockingCapacity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.CrossDockingCapacity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.capacity_per_hour_.MergeFrom(from._impl_.capacity_per_hour_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossDockingCapacity::CopyFrom(const CrossDockingCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.CrossDockingCapacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossDockingCapacity::IsInitialized() const {
  return true;
}

void CrossDockingCapacity::InternalSwap(CrossDockingCapacity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.capacity_per_hour_.InternalSwap(&other->_impl_.capacity_per_hour_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossDockingCapacity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[28]);
}

// ===================================================================

class CrossDockingTime::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_constant(const CrossDockingTime* msg);
  static const ::operations_research::lattle::SeparableNDFunction& time(const CrossDockingTime* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
CrossDockingTime::_Internal::time_constant(const CrossDockingTime* msg) {
  return *msg->_impl_.time_constant_;
}
const ::operations_research::lattle::SeparableNDFunction&
CrossDockingTime::_Internal::time(const CrossDockingTime* msg) {
  return *msg->_impl_.time_;
}
void CrossDockingTime::clear_time_constant() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_constant_ != nullptr) {
    delete _impl_.time_constant_;
  }
  _impl_.time_constant_ = nullptr;
}
CrossDockingTime::CrossDockingTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.CrossDockingTime)
}
CrossDockingTime::CrossDockingTime(const CrossDockingTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossDockingTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_constant_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_constant()) {
    _this->_impl_.time_constant_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_constant_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::operations_research::lattle::SeparableNDFunction(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.CrossDockingTime)
}

inline void CrossDockingTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_constant_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CrossDockingTime::~CrossDockingTime() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.CrossDockingTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossDockingTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_constant_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void CrossDockingTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossDockingTime::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.CrossDockingTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_constant_ != nullptr) {
    delete _impl_.time_constant_;
  }
  _impl_.time_constant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossDockingTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration time_constant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_constant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.SeparableNDFunction time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossDockingTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.CrossDockingTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_constant = 1;
  if (this->_internal_has_time_constant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_constant(this),
        _Internal::time_constant(this).GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.SeparableNDFunction time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.CrossDockingTime)
  return target;
}

size_t CrossDockingTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.CrossDockingTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration time_constant = 1;
  if (this->_internal_has_time_constant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_constant_);
  }

  // .operations_research.lattle.SeparableNDFunction time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossDockingTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossDockingTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossDockingTime::GetClassData() const { return &_class_data_; }


void CrossDockingTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossDockingTime*>(&to_msg);
  auto& from = static_cast<const CrossDockingTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.CrossDockingTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_constant()) {
    _this->_internal_mutable_time_constant()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_constant());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::operations_research::lattle::SeparableNDFunction::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossDockingTime::CopyFrom(const CrossDockingTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.CrossDockingTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossDockingTime::IsInitialized() const {
  return true;
}

void CrossDockingTime::InternalSwap(CrossDockingTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossDockingTime, _impl_.time_)
      + sizeof(CrossDockingTime::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(CrossDockingTime, _impl_.time_constant_)>(
          reinterpret_cast<char*>(&_impl_.time_constant_),
          reinterpret_cast<char*>(&other->_impl_.time_constant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossDockingTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[29]);
}

// ===================================================================

class DistanceMatrixEntry::_Internal {
 public:
};

DistanceMatrixEntry::DistanceMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.DistanceMatrixEntry)
}
DistanceMatrixEntry::DistanceMatrixEntry(const DistanceMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DistanceMatrixEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){from._impl_.weights_}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_hub().empty()) {
    _this->_impl_.source_hub_.Set(from._internal_source_hub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_hub().empty()) {
    _this->_impl_.destination_hub_.Set(from._internal_destination_hub(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.DistanceMatrixEntry)
}

inline void DistanceMatrixEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){arena}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistanceMatrixEntry::~DistanceMatrixEntry() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.DistanceMatrixEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistanceMatrixEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weights_.~RepeatedPtrField();
  _impl_.source_hub_.Destroy();
  _impl_.destination_hub_.Destroy();
}

void DistanceMatrixEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistanceMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.DistanceMatrixEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weights_.Clear();
  _impl_.source_hub_.ClearToEmpty();
  _impl_.destination_hub_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceMatrixEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_hub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.DistanceMatrixEntry.source_hub"));
        } else
          goto handle_unusual;
        continue;
      // string destination_hub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.DistanceMatrixEntry.destination_hub"));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ValueDimension weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistanceMatrixEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.DistanceMatrixEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_hub = 1;
  if (!this->_internal_source_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_hub().data(), static_cast<int>(this->_internal_source_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.DistanceMatrixEntry.source_hub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_hub(), target);
  }

  // string destination_hub = 2;
  if (!this->_internal_destination_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_hub().data(), static_cast<int>(this->_internal_destination_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.DistanceMatrixEntry.destination_hub");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_hub(), target);
  }

  // repeated .operations_research.lattle.ValueDimension weights = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.DistanceMatrixEntry)
  return target;
}

size_t DistanceMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.DistanceMatrixEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension weights = 3;
  total_size += 1UL * this->_internal_weights_size();
  for (const auto& msg : this->_impl_.weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string source_hub = 1;
  if (!this->_internal_source_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_hub());
  }

  // string destination_hub = 2;
  if (!this->_internal_destination_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_hub());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceMatrixEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DistanceMatrixEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceMatrixEntry::GetClassData() const { return &_class_data_; }


void DistanceMatrixEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DistanceMatrixEntry*>(&to_msg);
  auto& from = static_cast<const DistanceMatrixEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.DistanceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.weights_.MergeFrom(from._impl_.weights_);
  if (!from._internal_source_hub().empty()) {
    _this->_internal_set_source_hub(from._internal_source_hub());
  }
  if (!from._internal_destination_hub().empty()) {
    _this->_internal_set_destination_hub(from._internal_destination_hub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceMatrixEntry::CopyFrom(const DistanceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.DistanceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceMatrixEntry::IsInitialized() const {
  return true;
}

void DistanceMatrixEntry::InternalSwap(DistanceMatrixEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_hub_, lhs_arena,
      &other->_impl_.source_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_hub_, lhs_arena,
      &other->_impl_.destination_hub_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceMatrixEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[30]);
}

// ===================================================================

class Parcel::_Internal {
 public:
  using HasBits = decltype(std::declval<Parcel>()._impl_._has_bits_);
  static const ::google::type::DateTime& departure_time(const Parcel* msg);
  static const ::operations_research::lattle::DateTimeRange& arrival_time(const Parcel* msg);
  static const ::operations_research::lattle::EarlinessTardiness& arrival_earliness_tardiness_cost(const Parcel* msg);
  static void set_has_revenue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::type::DateTime&
Parcel::_Internal::departure_time(const Parcel* msg) {
  return *msg->_impl_.departure_time_;
}
const ::operations_research::lattle::DateTimeRange&
Parcel::_Internal::arrival_time(const Parcel* msg) {
  return *msg->_impl_.arrival_time_;
}
const ::operations_research::lattle::EarlinessTardiness&
Parcel::_Internal::arrival_earliness_tardiness_cost(const Parcel* msg) {
  return *msg->_impl_.arrival_earliness_tardiness_cost_;
}
void Parcel::clear_departure_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
}
Parcel::Parcel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Parcel)
}
Parcel::Parcel(const Parcel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Parcel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_){from._impl_.size_}
    , decltype(_impl_.parcel_){}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.arrival_earliness_tardiness_cost_){nullptr}
    , decltype(_impl_.revenue_){}
    , decltype(_impl_.must_be_refrigerated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parcel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parcel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parcel().empty()) {
    _this->_impl_.parcel_.Set(from._internal_parcel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_hub().empty()) {
    _this->_impl_.source_hub_.Set(from._internal_source_hub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_hub().empty()) {
    _this->_impl_.destination_hub_.Set(from._internal_destination_hub(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_departure_time()) {
    _this->_impl_.departure_time_ = new ::google::type::DateTime(*from._impl_.departure_time_);
  }
  if (from._internal_has_arrival_time()) {
    _this->_impl_.arrival_time_ = new ::operations_research::lattle::DateTimeRange(*from._impl_.arrival_time_);
  }
  if (from._internal_has_arrival_earliness_tardiness_cost()) {
    _this->_impl_.arrival_earliness_tardiness_cost_ = new ::operations_research::lattle::EarlinessTardiness(*from._impl_.arrival_earliness_tardiness_cost_);
  }
  ::memcpy(&_impl_.revenue_, &from._impl_.revenue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.must_be_refrigerated_) -
    reinterpret_cast<char*>(&_impl_.revenue_)) + sizeof(_impl_.must_be_refrigerated_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Parcel)
}

inline void Parcel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_){arena}
    , decltype(_impl_.parcel_){}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.arrival_earliness_tardiness_cost_){nullptr}
    , decltype(_impl_.revenue_){0}
    , decltype(_impl_.must_be_refrigerated_){false}
  };
  _impl_.parcel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parcel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Parcel::~Parcel() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Parcel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parcel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.size_.~RepeatedPtrField();
  _impl_.parcel_.Destroy();
  _impl_.source_hub_.Destroy();
  _impl_.destination_hub_.Destroy();
  if (this != internal_default_instance()) delete _impl_.departure_time_;
  if (this != internal_default_instance()) delete _impl_.arrival_time_;
  if (this != internal_default_instance()) delete _impl_.arrival_earliness_tardiness_cost_;
}

void Parcel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parcel::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Parcel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_.Clear();
  _impl_.parcel_.ClearToEmpty();
  _impl_.source_hub_.ClearToEmpty();
  _impl_.destination_hub_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_earliness_tardiness_cost_ != nullptr) {
    delete _impl_.arrival_earliness_tardiness_cost_;
  }
  _impl_.arrival_earliness_tardiness_cost_ = nullptr;
  _impl_.revenue_ = 0;
  _impl_.must_be_refrigerated_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parcel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parcel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parcel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.Parcel.parcel"));
        } else
          goto handle_unusual;
        continue;
      // string source_hub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.Parcel.source_hub"));
        } else
          goto handle_unusual;
        continue;
      // string destination_hub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.Parcel.destination_hub"));
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime departure_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.DateTimeRange arrival_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.EarlinessTardiness arrival_earliness_tardiness_cost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival_earliness_tardiness_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool must_be_refrigerated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.must_be_refrigerated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double revenue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_revenue(&has_bits);
          _impl_.revenue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ValueDimension size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_size(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parcel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Parcel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parcel = 1;
  if (!this->_internal_parcel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parcel().data(), static_cast<int>(this->_internal_parcel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.Parcel.parcel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parcel(), target);
  }

  // string source_hub = 2;
  if (!this->_internal_source_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_hub().data(), static_cast<int>(this->_internal_source_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.Parcel.source_hub");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_hub(), target);
  }

  // string destination_hub = 3;
  if (!this->_internal_destination_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_hub().data(), static_cast<int>(this->_internal_destination_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.Parcel.destination_hub");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_hub(), target);
  }

  // .google.type.DateTime departure_time = 4;
  if (this->_internal_has_departure_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::departure_time(this),
        _Internal::departure_time(this).GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.DateTimeRange arrival_time = 5;
  if (this->_internal_has_arrival_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::arrival_time(this),
        _Internal::arrival_time(this).GetCachedSize(), target, stream);
  }

  // .operations_research.lattle.EarlinessTardiness arrival_earliness_tardiness_cost = 6;
  if (this->_internal_has_arrival_earliness_tardiness_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::arrival_earliness_tardiness_cost(this),
        _Internal::arrival_earliness_tardiness_cost(this).GetCachedSize(), target, stream);
  }

  // bool must_be_refrigerated = 7;
  if (this->_internal_must_be_refrigerated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_must_be_refrigerated(), target);
  }

  // optional double revenue = 8;
  if (_internal_has_revenue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_revenue(), target);
  }

  // repeated .operations_research.lattle.ValueDimension size = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_size_size()); i < n; i++) {
    const auto& repfield = this->_internal_size(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Parcel)
  return target;
}

size_t Parcel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Parcel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension size = 9;
  total_size += 1UL * this->_internal_size_size();
  for (const auto& msg : this->_impl_.size_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string parcel = 1;
  if (!this->_internal_parcel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parcel());
  }

  // string source_hub = 2;
  if (!this->_internal_source_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_hub());
  }

  // string destination_hub = 3;
  if (!this->_internal_destination_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_hub());
  }

  // .google.type.DateTime departure_time = 4;
  if (this->_internal_has_departure_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_time_);
  }

  // .operations_research.lattle.DateTimeRange arrival_time = 5;
  if (this->_internal_has_arrival_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_time_);
  }

  // .operations_research.lattle.EarlinessTardiness arrival_earliness_tardiness_cost = 6;
  if (this->_internal_has_arrival_earliness_tardiness_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_earliness_tardiness_cost_);
  }

  // optional double revenue = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  // bool must_be_refrigerated = 7;
  if (this->_internal_must_be_refrigerated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parcel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Parcel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parcel::GetClassData() const { return &_class_data_; }


void Parcel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Parcel*>(&to_msg);
  auto& from = static_cast<const Parcel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Parcel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.size_.MergeFrom(from._impl_.size_);
  if (!from._internal_parcel().empty()) {
    _this->_internal_set_parcel(from._internal_parcel());
  }
  if (!from._internal_source_hub().empty()) {
    _this->_internal_set_source_hub(from._internal_source_hub());
  }
  if (!from._internal_destination_hub().empty()) {
    _this->_internal_set_destination_hub(from._internal_destination_hub());
  }
  if (from._internal_has_departure_time()) {
    _this->_internal_mutable_departure_time()->::google::type::DateTime::MergeFrom(
        from._internal_departure_time());
  }
  if (from._internal_has_arrival_time()) {
    _this->_internal_mutable_arrival_time()->::operations_research::lattle::DateTimeRange::MergeFrom(
        from._internal_arrival_time());
  }
  if (from._internal_has_arrival_earliness_tardiness_cost()) {
    _this->_internal_mutable_arrival_earliness_tardiness_cost()->::operations_research::lattle::EarlinessTardiness::MergeFrom(
        from._internal_arrival_earliness_tardiness_cost());
  }
  if (from._internal_has_revenue()) {
    _this->_internal_set_revenue(from._internal_revenue());
  }
  if (from._internal_must_be_refrigerated() != 0) {
    _this->_internal_set_must_be_refrigerated(from._internal_must_be_refrigerated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parcel::CopyFrom(const Parcel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Parcel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parcel::IsInitialized() const {
  return true;
}

void Parcel::InternalSwap(Parcel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.size_.InternalSwap(&other->_impl_.size_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parcel_, lhs_arena,
      &other->_impl_.parcel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_hub_, lhs_arena,
      &other->_impl_.source_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_hub_, lhs_arena,
      &other->_impl_.destination_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parcel, _impl_.must_be_refrigerated_)
      + sizeof(Parcel::_impl_.must_be_refrigerated_)
      - PROTOBUF_FIELD_OFFSET(Parcel, _impl_.departure_time_)>(
          reinterpret_cast<char*>(&_impl_.departure_time_),
          reinterpret_cast<char*>(&other->_impl_.departure_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parcel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[31]);
}

// ===================================================================

ParcelRoute_CostEntry_DoNotUse::ParcelRoute_CostEntry_DoNotUse() {}
ParcelRoute_CostEntry_DoNotUse::ParcelRoute_CostEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ParcelRoute_CostEntry_DoNotUse::MergeFrom(const ParcelRoute_CostEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ParcelRoute_CostEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[32]);
}

// ===================================================================

class ParcelRoute::_Internal {
 public:
  static const ::google::type::DateTime& departure_time(const ParcelRoute* msg);
  static const ::google::type::DateTime& arrival_time(const ParcelRoute* msg);
  static const ::storage_util::Int128& fingerprint(const ParcelRoute* msg);
};

const ::google::type::DateTime&
ParcelRoute::_Internal::departure_time(const ParcelRoute* msg) {
  return *msg->_impl_.departure_time_;
}
const ::google::type::DateTime&
ParcelRoute::_Internal::arrival_time(const ParcelRoute* msg) {
  return *msg->_impl_.arrival_time_;
}
const ::storage_util::Int128&
ParcelRoute::_Internal::fingerprint(const ParcelRoute* msg) {
  return *msg->_impl_.fingerprint_;
}
void ParcelRoute::clear_departure_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
}
void ParcelRoute::clear_arrival_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
}
void ParcelRoute::clear_fingerprint() {
  if (GetArenaForAllocation() == nullptr && _impl_.fingerprint_ != nullptr) {
    delete _impl_.fingerprint_;
  }
  _impl_.fingerprint_ = nullptr;
}
ParcelRoute::ParcelRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ParcelRoute::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.ParcelRoute)
}
ParcelRoute::ParcelRoute(const ParcelRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParcelRoute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_segments_){from._impl_.path_segments_}
    , /*decltype(_impl_.cost_)*/{}
    , decltype(_impl_.parcel_){}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.incurred_penalties_from_arrival_time_per_minute_){}
    , decltype(_impl_.cost_constant_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cost_.MergeFrom(from._impl_.cost_);
  _impl_.parcel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parcel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parcel().empty()) {
    _this->_impl_.parcel_.Set(from._internal_parcel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_departure_time()) {
    _this->_impl_.departure_time_ = new ::google::type::DateTime(*from._impl_.departure_time_);
  }
  if (from._internal_has_arrival_time()) {
    _this->_impl_.arrival_time_ = new ::google::type::DateTime(*from._impl_.arrival_time_);
  }
  if (from._internal_has_fingerprint()) {
    _this->_impl_.fingerprint_ = new ::storage_util::Int128(*from._impl_.fingerprint_);
  }
  ::memcpy(&_impl_.incurred_penalties_from_arrival_time_per_minute_, &from._impl_.incurred_penalties_from_arrival_time_per_minute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_constant_) -
    reinterpret_cast<char*>(&_impl_.incurred_penalties_from_arrival_time_per_minute_)) + sizeof(_impl_.cost_constant_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.ParcelRoute)
}

inline void ParcelRoute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_segments_){arena}
    , /*decltype(_impl_.cost_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.parcel_){}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.incurred_penalties_from_arrival_time_per_minute_){0}
    , decltype(_impl_.cost_constant_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parcel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parcel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParcelRoute::~ParcelRoute() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.ParcelRoute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ParcelRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_segments_.~RepeatedPtrField();
  _impl_.cost_.Destruct();
  _impl_.cost_.~MapField();
  _impl_.parcel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.departure_time_;
  if (this != internal_default_instance()) delete _impl_.arrival_time_;
  if (this != internal_default_instance()) delete _impl_.fingerprint_;
}

void ParcelRoute::ArenaDtor(void* object) {
  ParcelRoute* _this = reinterpret_cast< ParcelRoute* >(object);
  _this->_impl_.cost_.Destruct();
}
void ParcelRoute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParcelRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.ParcelRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_segments_.Clear();
  _impl_.cost_.Clear();
  _impl_.parcel_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fingerprint_ != nullptr) {
    delete _impl_.fingerprint_;
  }
  _impl_.fingerprint_ = nullptr;
  ::memset(&_impl_.incurred_penalties_from_arrival_time_per_minute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_constant_) -
      reinterpret_cast<char*>(&_impl_.incurred_penalties_from_arrival_time_per_minute_)) + sizeof(_impl_.cost_constant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParcelRoute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parcel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parcel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.ParcelRoute.parcel"));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.AnnotatedPathSegment path_segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime departure_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime arrival_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double incurred_penalties_from_arrival_time_per_minute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.incurred_penalties_from_arrival_time_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cost_constant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.cost_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, double> cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.cost_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .storage_util.Int128 fingerprint = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fingerprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParcelRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.ParcelRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parcel = 1;
  if (!this->_internal_parcel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parcel().data(), static_cast<int>(this->_internal_parcel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.ParcelRoute.parcel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parcel(), target);
  }

  // repeated .operations_research.lattle.AnnotatedPathSegment path_segments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_path_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.type.DateTime departure_time = 3;
  if (this->_internal_has_departure_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::departure_time(this),
        _Internal::departure_time(this).GetCachedSize(), target, stream);
  }

  // .google.type.DateTime arrival_time = 4;
  if (this->_internal_has_arrival_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::arrival_time(this),
        _Internal::arrival_time(this).GetCachedSize(), target, stream);
  }

  // double incurred_penalties_from_arrival_time_per_minute = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_incurred_penalties_from_arrival_time_per_minute = this->_internal_incurred_penalties_from_arrival_time_per_minute();
  uint64_t raw_incurred_penalties_from_arrival_time_per_minute;
  memcpy(&raw_incurred_penalties_from_arrival_time_per_minute, &tmp_incurred_penalties_from_arrival_time_per_minute, sizeof(tmp_incurred_penalties_from_arrival_time_per_minute));
  if (raw_incurred_penalties_from_arrival_time_per_minute != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_incurred_penalties_from_arrival_time_per_minute(), target);
  }

  // double cost_constant = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost_constant = this->_internal_cost_constant();
  uint64_t raw_cost_constant;
  memcpy(&raw_cost_constant, &tmp_cost_constant, sizeof(tmp_cost_constant));
  if (raw_cost_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_cost_constant(), target);
  }

  // map<string, double> cost = 7;
  if (!this->_internal_cost().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = ParcelRoute_CostEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_cost();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.ParcelRoute.CostEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .storage_util.Int128 fingerprint = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_fingerprint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fingerprint(this),
        _Internal::fingerprint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.ParcelRoute)
  return target;
}

size_t ParcelRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.ParcelRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.AnnotatedPathSegment path_segments = 2;
  total_size += 1UL * this->_internal_path_segments_size();
  for (const auto& msg : this->_impl_.path_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> cost = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cost_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_cost().begin();
      it != this->_internal_cost().end(); ++it) {
    total_size += ParcelRoute_CostEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string parcel = 1;
  if (!this->_internal_parcel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parcel());
  }

  // .google.type.DateTime departure_time = 3;
  if (this->_internal_has_departure_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_time_);
  }

  // .google.type.DateTime arrival_time = 4;
  if (this->_internal_has_arrival_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_time_);
  }

  // .storage_util.Int128 fingerprint = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_fingerprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fingerprint_);
  }

  // double incurred_penalties_from_arrival_time_per_minute = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_incurred_penalties_from_arrival_time_per_minute = this->_internal_incurred_penalties_from_arrival_time_per_minute();
  uint64_t raw_incurred_penalties_from_arrival_time_per_minute;
  memcpy(&raw_incurred_penalties_from_arrival_time_per_minute, &tmp_incurred_penalties_from_arrival_time_per_minute, sizeof(tmp_incurred_penalties_from_arrival_time_per_minute));
  if (raw_incurred_penalties_from_arrival_time_per_minute != 0) {
    total_size += 1 + 8;
  }

  // double cost_constant = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost_constant = this->_internal_cost_constant();
  uint64_t raw_cost_constant;
  memcpy(&raw_cost_constant, &tmp_cost_constant, sizeof(tmp_cost_constant));
  if (raw_cost_constant != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParcelRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParcelRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParcelRoute::GetClassData() const { return &_class_data_; }


void ParcelRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParcelRoute*>(&to_msg);
  auto& from = static_cast<const ParcelRoute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.ParcelRoute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path_segments_.MergeFrom(from._impl_.path_segments_);
  _this->_impl_.cost_.MergeFrom(from._impl_.cost_);
  if (!from._internal_parcel().empty()) {
    _this->_internal_set_parcel(from._internal_parcel());
  }
  if (from._internal_has_departure_time()) {
    _this->_internal_mutable_departure_time()->::google::type::DateTime::MergeFrom(
        from._internal_departure_time());
  }
  if (from._internal_has_arrival_time()) {
    _this->_internal_mutable_arrival_time()->::google::type::DateTime::MergeFrom(
        from._internal_arrival_time());
  }
  if (from._internal_has_fingerprint()) {
    _this->_internal_mutable_fingerprint()->::storage_util::Int128::MergeFrom(
        from._internal_fingerprint());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_incurred_penalties_from_arrival_time_per_minute = from._internal_incurred_penalties_from_arrival_time_per_minute();
  uint64_t raw_incurred_penalties_from_arrival_time_per_minute;
  memcpy(&raw_incurred_penalties_from_arrival_time_per_minute, &tmp_incurred_penalties_from_arrival_time_per_minute, sizeof(tmp_incurred_penalties_from_arrival_time_per_minute));
  if (raw_incurred_penalties_from_arrival_time_per_minute != 0) {
    _this->_internal_set_incurred_penalties_from_arrival_time_per_minute(from._internal_incurred_penalties_from_arrival_time_per_minute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost_constant = from._internal_cost_constant();
  uint64_t raw_cost_constant;
  memcpy(&raw_cost_constant, &tmp_cost_constant, sizeof(tmp_cost_constant));
  if (raw_cost_constant != 0) {
    _this->_internal_set_cost_constant(from._internal_cost_constant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParcelRoute::CopyFrom(const ParcelRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.ParcelRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParcelRoute::IsInitialized() const {
  return true;
}

void ParcelRoute::InternalSwap(ParcelRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_segments_.InternalSwap(&other->_impl_.path_segments_);
  _impl_.cost_.InternalSwap(&other->_impl_.cost_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parcel_, lhs_arena,
      &other->_impl_.parcel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParcelRoute, _impl_.cost_constant_)
      + sizeof(ParcelRoute::_impl_.cost_constant_)
      - PROTOBUF_FIELD_OFFSET(ParcelRoute, _impl_.departure_time_)>(
          reinterpret_cast<char*>(&_impl_.departure_time_),
          reinterpret_cast<char*>(&other->_impl_.departure_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParcelRoute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[33]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.Path)
}

inline void Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
}

void Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.lattle.PathSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PathSegment segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PathSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }


void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path*>(&to_msg);
  auto& from = static_cast<const Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[34]);
}

// ===================================================================

class IncompletePath::_Internal {
 public:
};

IncompletePath::IncompletePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.IncompletePath)
}
IncompletePath::IncompletePath(const IncompletePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncompletePath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.IncompletePath)
}

inline void IncompletePath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncompletePath::~IncompletePath() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.IncompletePath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncompletePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
}

void IncompletePath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncompletePath::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.IncompletePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncompletePath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.lattle.PathSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncompletePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.IncompletePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PathSegment segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.IncompletePath)
  return target;
}

size_t IncompletePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.IncompletePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.PathSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncompletePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncompletePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncompletePath::GetClassData() const { return &_class_data_; }


void IncompletePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncompletePath*>(&to_msg);
  auto& from = static_cast<const IncompletePath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.IncompletePath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncompletePath::CopyFrom(const IncompletePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.IncompletePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncompletePath::IsInitialized() const {
  return true;
}

void IncompletePath::InternalSwap(IncompletePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncompletePath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[35]);
}

// ===================================================================

class PathSegment::_Internal {
 public:
};

PathSegment::PathSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.PathSegment)
}
PathSegment::PathSegment(const PathSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.line_rotation_){}
    , decltype(_impl_.vehicle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_hub().empty()) {
    _this->_impl_.source_hub_.Set(from._internal_source_hub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_hub().empty()) {
    _this->_impl_.destination_hub_.Set(from._internal_destination_hub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line().empty()) {
    _this->_impl_.line_.Set(from._internal_line(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_rotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_rotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line_rotation().empty()) {
    _this->_impl_.line_rotation_.Set(from._internal_line_rotation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehicle().empty()) {
    _this->_impl_.vehicle_.Set(from._internal_vehicle(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.PathSegment)
}

inline void PathSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.line_rotation_){}
    , decltype(_impl_.vehicle_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_rotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_rotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathSegment::~PathSegment() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.PathSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_hub_.Destroy();
  _impl_.destination_hub_.Destroy();
  _impl_.line_.Destroy();
  _impl_.line_rotation_.Destroy();
  _impl_.vehicle_.Destroy();
}

void PathSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.PathSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_hub_.ClearToEmpty();
  _impl_.destination_hub_.ClearToEmpty();
  _impl_.line_.ClearToEmpty();
  _impl_.line_rotation_.ClearToEmpty();
  _impl_.vehicle_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_hub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.PathSegment.source_hub"));
        } else
          goto handle_unusual;
        continue;
      // string destination_hub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.PathSegment.destination_hub"));
        } else
          goto handle_unusual;
        continue;
      // string line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.PathSegment.line"));
        } else
          goto handle_unusual;
        continue;
      // string line_rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_line_rotation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.PathSegment.line_rotation"));
        } else
          goto handle_unusual;
        continue;
      // string vehicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_vehicle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.PathSegment.vehicle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.PathSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_hub = 1;
  if (!this->_internal_source_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_hub().data(), static_cast<int>(this->_internal_source_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.PathSegment.source_hub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_hub(), target);
  }

  // string destination_hub = 2;
  if (!this->_internal_destination_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_hub().data(), static_cast<int>(this->_internal_destination_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.PathSegment.destination_hub");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_hub(), target);
  }

  // string line = 3;
  if (!this->_internal_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.PathSegment.line");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_line(), target);
  }

  // string line_rotation = 4;
  if (!this->_internal_line_rotation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_rotation().data(), static_cast<int>(this->_internal_line_rotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.PathSegment.line_rotation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_line_rotation(), target);
  }

  // string vehicle = 5;
  if (!this->_internal_vehicle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle().data(), static_cast<int>(this->_internal_vehicle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.PathSegment.vehicle");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vehicle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.PathSegment)
  return target;
}

size_t PathSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.PathSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_hub = 1;
  if (!this->_internal_source_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_hub());
  }

  // string destination_hub = 2;
  if (!this->_internal_destination_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_hub());
  }

  // string line = 3;
  if (!this->_internal_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  // string line_rotation = 4;
  if (!this->_internal_line_rotation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_rotation());
  }

  // string vehicle = 5;
  if (!this->_internal_vehicle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathSegment::GetClassData() const { return &_class_data_; }


void PathSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathSegment*>(&to_msg);
  auto& from = static_cast<const PathSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.PathSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_hub().empty()) {
    _this->_internal_set_source_hub(from._internal_source_hub());
  }
  if (!from._internal_destination_hub().empty()) {
    _this->_internal_set_destination_hub(from._internal_destination_hub());
  }
  if (!from._internal_line().empty()) {
    _this->_internal_set_line(from._internal_line());
  }
  if (!from._internal_line_rotation().empty()) {
    _this->_internal_set_line_rotation(from._internal_line_rotation());
  }
  if (!from._internal_vehicle().empty()) {
    _this->_internal_set_vehicle(from._internal_vehicle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathSegment::CopyFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSegment::IsInitialized() const {
  return true;
}

void PathSegment::InternalSwap(PathSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_hub_, lhs_arena,
      &other->_impl_.source_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_hub_, lhs_arena,
      &other->_impl_.destination_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_, lhs_arena,
      &other->_impl_.line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_rotation_, lhs_arena,
      &other->_impl_.line_rotation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehicle_, lhs_arena,
      &other->_impl_.vehicle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PathSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[36]);
}

// ===================================================================

AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse() {}
AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::MergeFrom(const AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[37]);
}

// ===================================================================

class AnnotatedPathSegment::_Internal {
 public:
  static const ::operations_research::lattle::PathSegment& path_segment(const AnnotatedPathSegment* msg);
  static const ::google::type::DateTime& arrival_time(const AnnotatedPathSegment* msg);
  static const ::google::type::DateTime& departure_time(const AnnotatedPathSegment* msg);
};

const ::operations_research::lattle::PathSegment&
AnnotatedPathSegment::_Internal::path_segment(const AnnotatedPathSegment* msg) {
  return *msg->_impl_.path_segment_;
}
const ::google::type::DateTime&
AnnotatedPathSegment::_Internal::arrival_time(const AnnotatedPathSegment* msg) {
  return *msg->_impl_.arrival_time_;
}
const ::google::type::DateTime&
AnnotatedPathSegment::_Internal::departure_time(const AnnotatedPathSegment* msg) {
  return *msg->_impl_.departure_time_;
}
void AnnotatedPathSegment::clear_arrival_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
}
void AnnotatedPathSegment::clear_departure_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
}
AnnotatedPathSegment::AnnotatedPathSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AnnotatedPathSegment::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.AnnotatedPathSegment)
}
AnnotatedPathSegment::AnnotatedPathSegment(const AnnotatedPathSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotatedPathSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.segment_cost_due_to_vehicle_)*/{}
    , decltype(_impl_.path_segment_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.segment_cost_constant_){}
    , decltype(_impl_.segment_cost_due_to_departure_){}
    , decltype(_impl_.segment_cost_due_to_arrival_){}
    , decltype(_impl_.is_committed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.segment_cost_due_to_vehicle_.MergeFrom(from._impl_.segment_cost_due_to_vehicle_);
  if (from._internal_has_path_segment()) {
    _this->_impl_.path_segment_ = new ::operations_research::lattle::PathSegment(*from._impl_.path_segment_);
  }
  if (from._internal_has_arrival_time()) {
    _this->_impl_.arrival_time_ = new ::google::type::DateTime(*from._impl_.arrival_time_);
  }
  if (from._internal_has_departure_time()) {
    _this->_impl_.departure_time_ = new ::google::type::DateTime(*from._impl_.departure_time_);
  }
  ::memcpy(&_impl_.segment_cost_constant_, &from._impl_.segment_cost_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_committed_) -
    reinterpret_cast<char*>(&_impl_.segment_cost_constant_)) + sizeof(_impl_.is_committed_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.AnnotatedPathSegment)
}

inline void AnnotatedPathSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.segment_cost_due_to_vehicle_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.path_segment_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.segment_cost_constant_){0}
    , decltype(_impl_.segment_cost_due_to_departure_){0}
    , decltype(_impl_.segment_cost_due_to_arrival_){0}
    , decltype(_impl_.is_committed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnnotatedPathSegment::~AnnotatedPathSegment() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.AnnotatedPathSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AnnotatedPathSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_cost_due_to_vehicle_.Destruct();
  _impl_.segment_cost_due_to_vehicle_.~MapField();
  if (this != internal_default_instance()) delete _impl_.path_segment_;
  if (this != internal_default_instance()) delete _impl_.arrival_time_;
  if (this != internal_default_instance()) delete _impl_.departure_time_;
}

void AnnotatedPathSegment::ArenaDtor(void* object) {
  AnnotatedPathSegment* _this = reinterpret_cast< AnnotatedPathSegment* >(object);
  _this->_impl_.segment_cost_due_to_vehicle_.Destruct();
}
void AnnotatedPathSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotatedPathSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.AnnotatedPathSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_cost_due_to_vehicle_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.path_segment_ != nullptr) {
    delete _impl_.path_segment_;
  }
  _impl_.path_segment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
  ::memset(&_impl_.segment_cost_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_committed_) -
      reinterpret_cast<char*>(&_impl_.segment_cost_constant_)) + sizeof(_impl_.is_committed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotatedPathSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.lattle.PathSegment path_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime arrival_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.type.DateTime departure_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double segment_cost_constant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.segment_cost_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, double> segment_cost_due_to_vehicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.segment_cost_due_to_vehicle_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double segment_cost_due_to_departure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.segment_cost_due_to_departure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double segment_cost_due_to_arrival = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.segment_cost_due_to_arrival_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_committed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotatedPathSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.AnnotatedPathSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.lattle.PathSegment path_segment = 1;
  if (this->_internal_has_path_segment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_segment(this),
        _Internal::path_segment(this).GetCachedSize(), target, stream);
  }

  // .google.type.DateTime arrival_time = 2;
  if (this->_internal_has_arrival_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::arrival_time(this),
        _Internal::arrival_time(this).GetCachedSize(), target, stream);
  }

  // .google.type.DateTime departure_time = 3;
  if (this->_internal_has_departure_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::departure_time(this),
        _Internal::departure_time(this).GetCachedSize(), target, stream);
  }

  // double segment_cost_constant = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_constant = this->_internal_segment_cost_constant();
  uint64_t raw_segment_cost_constant;
  memcpy(&raw_segment_cost_constant, &tmp_segment_cost_constant, sizeof(tmp_segment_cost_constant));
  if (raw_segment_cost_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_segment_cost_constant(), target);
  }

  // map<string, double> segment_cost_due_to_vehicle = 5;
  if (!this->_internal_segment_cost_due_to_vehicle().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_segment_cost_due_to_vehicle();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.lattle.AnnotatedPathSegment.SegmentCostDueToVehicleEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // double segment_cost_due_to_departure = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_departure = this->_internal_segment_cost_due_to_departure();
  uint64_t raw_segment_cost_due_to_departure;
  memcpy(&raw_segment_cost_due_to_departure, &tmp_segment_cost_due_to_departure, sizeof(tmp_segment_cost_due_to_departure));
  if (raw_segment_cost_due_to_departure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_segment_cost_due_to_departure(), target);
  }

  // double segment_cost_due_to_arrival = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_arrival = this->_internal_segment_cost_due_to_arrival();
  uint64_t raw_segment_cost_due_to_arrival;
  memcpy(&raw_segment_cost_due_to_arrival, &tmp_segment_cost_due_to_arrival, sizeof(tmp_segment_cost_due_to_arrival));
  if (raw_segment_cost_due_to_arrival != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_segment_cost_due_to_arrival(), target);
  }

  // bool is_committed = 8;
  if (this->_internal_is_committed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.AnnotatedPathSegment)
  return target;
}

size_t AnnotatedPathSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.AnnotatedPathSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> segment_cost_due_to_vehicle = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segment_cost_due_to_vehicle_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_segment_cost_due_to_vehicle().begin();
      it != this->_internal_segment_cost_due_to_vehicle().end(); ++it) {
    total_size += AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .operations_research.lattle.PathSegment path_segment = 1;
  if (this->_internal_has_path_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_segment_);
  }

  // .google.type.DateTime arrival_time = 2;
  if (this->_internal_has_arrival_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_time_);
  }

  // .google.type.DateTime departure_time = 3;
  if (this->_internal_has_departure_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_time_);
  }

  // double segment_cost_constant = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_constant = this->_internal_segment_cost_constant();
  uint64_t raw_segment_cost_constant;
  memcpy(&raw_segment_cost_constant, &tmp_segment_cost_constant, sizeof(tmp_segment_cost_constant));
  if (raw_segment_cost_constant != 0) {
    total_size += 1 + 8;
  }

  // double segment_cost_due_to_departure = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_departure = this->_internal_segment_cost_due_to_departure();
  uint64_t raw_segment_cost_due_to_departure;
  memcpy(&raw_segment_cost_due_to_departure, &tmp_segment_cost_due_to_departure, sizeof(tmp_segment_cost_due_to_departure));
  if (raw_segment_cost_due_to_departure != 0) {
    total_size += 1 + 8;
  }

  // double segment_cost_due_to_arrival = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_arrival = this->_internal_segment_cost_due_to_arrival();
  uint64_t raw_segment_cost_due_to_arrival;
  memcpy(&raw_segment_cost_due_to_arrival, &tmp_segment_cost_due_to_arrival, sizeof(tmp_segment_cost_due_to_arrival));
  if (raw_segment_cost_due_to_arrival != 0) {
    total_size += 1 + 8;
  }

  // bool is_committed = 8;
  if (this->_internal_is_committed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotatedPathSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotatedPathSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotatedPathSegment::GetClassData() const { return &_class_data_; }


void AnnotatedPathSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotatedPathSegment*>(&to_msg);
  auto& from = static_cast<const AnnotatedPathSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.AnnotatedPathSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segment_cost_due_to_vehicle_.MergeFrom(from._impl_.segment_cost_due_to_vehicle_);
  if (from._internal_has_path_segment()) {
    _this->_internal_mutable_path_segment()->::operations_research::lattle::PathSegment::MergeFrom(
        from._internal_path_segment());
  }
  if (from._internal_has_arrival_time()) {
    _this->_internal_mutable_arrival_time()->::google::type::DateTime::MergeFrom(
        from._internal_arrival_time());
  }
  if (from._internal_has_departure_time()) {
    _this->_internal_mutable_departure_time()->::google::type::DateTime::MergeFrom(
        from._internal_departure_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_constant = from._internal_segment_cost_constant();
  uint64_t raw_segment_cost_constant;
  memcpy(&raw_segment_cost_constant, &tmp_segment_cost_constant, sizeof(tmp_segment_cost_constant));
  if (raw_segment_cost_constant != 0) {
    _this->_internal_set_segment_cost_constant(from._internal_segment_cost_constant());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_departure = from._internal_segment_cost_due_to_departure();
  uint64_t raw_segment_cost_due_to_departure;
  memcpy(&raw_segment_cost_due_to_departure, &tmp_segment_cost_due_to_departure, sizeof(tmp_segment_cost_due_to_departure));
  if (raw_segment_cost_due_to_departure != 0) {
    _this->_internal_set_segment_cost_due_to_departure(from._internal_segment_cost_due_to_departure());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_segment_cost_due_to_arrival = from._internal_segment_cost_due_to_arrival();
  uint64_t raw_segment_cost_due_to_arrival;
  memcpy(&raw_segment_cost_due_to_arrival, &tmp_segment_cost_due_to_arrival, sizeof(tmp_segment_cost_due_to_arrival));
  if (raw_segment_cost_due_to_arrival != 0) {
    _this->_internal_set_segment_cost_due_to_arrival(from._internal_segment_cost_due_to_arrival());
  }
  if (from._internal_is_committed() != 0) {
    _this->_internal_set_is_committed(from._internal_is_committed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotatedPathSegment::CopyFrom(const AnnotatedPathSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.AnnotatedPathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedPathSegment::IsInitialized() const {
  return true;
}

void AnnotatedPathSegment::InternalSwap(AnnotatedPathSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_cost_due_to_vehicle_.InternalSwap(&other->_impl_.segment_cost_due_to_vehicle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotatedPathSegment, _impl_.is_committed_)
      + sizeof(AnnotatedPathSegment::_impl_.is_committed_)
      - PROTOBUF_FIELD_OFFSET(AnnotatedPathSegment, _impl_.path_segment_)>(
          reinterpret_cast<char*>(&_impl_.path_segment_),
          reinterpret_cast<char*>(&other->_impl_.path_segment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedPathSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[38]);
}

// ===================================================================

class EarlinessTardinessCost::_Internal {
 public:
};

EarlinessTardinessCost::EarlinessTardinessCost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.EarlinessTardinessCost)
}
EarlinessTardinessCost::EarlinessTardinessCost(const EarlinessTardinessCost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EarlinessTardinessCost* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.earliness_){}
    , decltype(_impl_.tardiness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.earliness_, &from._impl_.earliness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tardiness_) -
    reinterpret_cast<char*>(&_impl_.earliness_)) + sizeof(_impl_.tardiness_));
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.EarlinessTardinessCost)
}

inline void EarlinessTardinessCost::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.earliness_){0}
    , decltype(_impl_.tardiness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EarlinessTardinessCost::~EarlinessTardinessCost() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.EarlinessTardinessCost)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EarlinessTardinessCost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarlinessTardinessCost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EarlinessTardinessCost::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.EarlinessTardinessCost)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.earliness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tardiness_) -
      reinterpret_cast<char*>(&_impl_.earliness_)) + sizeof(_impl_.tardiness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarlinessTardinessCost::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double earliness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.earliness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tardiness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.tardiness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarlinessTardinessCost::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.EarlinessTardinessCost)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double earliness = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_earliness = this->_internal_earliness();
  uint64_t raw_earliness;
  memcpy(&raw_earliness, &tmp_earliness, sizeof(tmp_earliness));
  if (raw_earliness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_earliness(), target);
  }

  // double tardiness = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardiness = this->_internal_tardiness();
  uint64_t raw_tardiness;
  memcpy(&raw_tardiness, &tmp_tardiness, sizeof(tmp_tardiness));
  if (raw_tardiness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_tardiness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.EarlinessTardinessCost)
  return target;
}

size_t EarlinessTardinessCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.EarlinessTardinessCost)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double earliness = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_earliness = this->_internal_earliness();
  uint64_t raw_earliness;
  memcpy(&raw_earliness, &tmp_earliness, sizeof(tmp_earliness));
  if (raw_earliness != 0) {
    total_size += 1 + 8;
  }

  // double tardiness = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardiness = this->_internal_tardiness();
  uint64_t raw_tardiness;
  memcpy(&raw_tardiness, &tmp_tardiness, sizeof(tmp_tardiness));
  if (raw_tardiness != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarlinessTardinessCost::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EarlinessTardinessCost::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarlinessTardinessCost::GetClassData() const { return &_class_data_; }


void EarlinessTardinessCost::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EarlinessTardinessCost*>(&to_msg);
  auto& from = static_cast<const EarlinessTardinessCost&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.EarlinessTardinessCost)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_earliness = from._internal_earliness();
  uint64_t raw_earliness;
  memcpy(&raw_earliness, &tmp_earliness, sizeof(tmp_earliness));
  if (raw_earliness != 0) {
    _this->_internal_set_earliness(from._internal_earliness());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tardiness = from._internal_tardiness();
  uint64_t raw_tardiness;
  memcpy(&raw_tardiness, &tmp_tardiness, sizeof(tmp_tardiness));
  if (raw_tardiness != 0) {
    _this->_internal_set_tardiness(from._internal_tardiness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarlinessTardinessCost::CopyFrom(const EarlinessTardinessCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.EarlinessTardinessCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarlinessTardinessCost::IsInitialized() const {
  return true;
}

void EarlinessTardinessCost::InternalSwap(EarlinessTardinessCost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarlinessTardinessCost, _impl_.tardiness_)
      + sizeof(EarlinessTardinessCost::_impl_.tardiness_)
      - PROTOBUF_FIELD_OFFSET(EarlinessTardinessCost, _impl_.earliness_)>(
          reinterpret_cast<char*>(&_impl_.earliness_),
          reinterpret_cast<char*>(&other->_impl_.earliness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarlinessTardinessCost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[39]);
}

// ===================================================================

class LogisticsNetworkState_UsedCapacityInVehicle::_Internal {
 public:
};

LogisticsNetworkState_UsedCapacityInVehicle::LogisticsNetworkState_UsedCapacityInVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
}
LogisticsNetworkState_UsedCapacityInVehicle::LogisticsNetworkState_UsedCapacityInVehicle(const LogisticsNetworkState_UsedCapacityInVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogisticsNetworkState_UsedCapacityInVehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.used_capacity_){from._impl_.used_capacity_}
    , decltype(_impl_.line_){}
    , decltype(_impl_.line_rotation_){}
    , decltype(_impl_.vehicle_){}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line().empty()) {
    _this->_impl_.line_.Set(from._internal_line(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_rotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_rotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line_rotation().empty()) {
    _this->_impl_.line_rotation_.Set(from._internal_line_rotation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehicle().empty()) {
    _this->_impl_.vehicle_.Set(from._internal_vehicle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_hub().empty()) {
    _this->_impl_.source_hub_.Set(from._internal_source_hub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_hub().empty()) {
    _this->_impl_.destination_hub_.Set(from._internal_destination_hub(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
}

inline void LogisticsNetworkState_UsedCapacityInVehicle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.used_capacity_){arena}
    , decltype(_impl_.line_){}
    , decltype(_impl_.line_rotation_){}
    , decltype(_impl_.vehicle_){}
    , decltype(_impl_.source_hub_){}
    , decltype(_impl_.destination_hub_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_rotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_rotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogisticsNetworkState_UsedCapacityInVehicle::~LogisticsNetworkState_UsedCapacityInVehicle() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogisticsNetworkState_UsedCapacityInVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.used_capacity_.~RepeatedPtrField();
  _impl_.line_.Destroy();
  _impl_.line_rotation_.Destroy();
  _impl_.vehicle_.Destroy();
  _impl_.source_hub_.Destroy();
  _impl_.destination_hub_.Destroy();
}

void LogisticsNetworkState_UsedCapacityInVehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogisticsNetworkState_UsedCapacityInVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.used_capacity_.Clear();
  _impl_.line_.ClearToEmpty();
  _impl_.line_rotation_.ClearToEmpty();
  _impl_.vehicle_.ClearToEmpty();
  _impl_.source_hub_.ClearToEmpty();
  _impl_.destination_hub_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogisticsNetworkState_UsedCapacityInVehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.line"));
        } else
          goto handle_unusual;
        continue;
      // string line_rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_line_rotation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.line_rotation"));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ValueDimension used_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_used_capacity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string vehicle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_vehicle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.vehicle"));
        } else
          goto handle_unusual;
        continue;
      // string source_hub = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.source_hub"));
        } else
          goto handle_unusual;
        continue;
      // string destination_hub = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_destination_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.destination_hub"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogisticsNetworkState_UsedCapacityInVehicle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string line = 1;
  if (!this->_internal_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.line");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_line(), target);
  }

  // string line_rotation = 2;
  if (!this->_internal_line_rotation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_rotation().data(), static_cast<int>(this->_internal_line_rotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.line_rotation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_line_rotation(), target);
  }

  // repeated .operations_research.lattle.ValueDimension used_capacity = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_used_capacity_size()); i < n; i++) {
    const auto& repfield = this->_internal_used_capacity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string vehicle = 4;
  if (!this->_internal_vehicle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle().data(), static_cast<int>(this->_internal_vehicle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.vehicle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vehicle(), target);
  }

  // string source_hub = 5;
  if (!this->_internal_source_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_hub().data(), static_cast<int>(this->_internal_source_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.source_hub");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source_hub(), target);
  }

  // string destination_hub = 6;
  if (!this->_internal_destination_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_hub().data(), static_cast<int>(this->_internal_destination_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle.destination_hub");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_destination_hub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  return target;
}

size_t LogisticsNetworkState_UsedCapacityInVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.ValueDimension used_capacity = 3;
  total_size += 1UL * this->_internal_used_capacity_size();
  for (const auto& msg : this->_impl_.used_capacity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string line = 1;
  if (!this->_internal_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  // string line_rotation = 2;
  if (!this->_internal_line_rotation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_rotation());
  }

  // string vehicle = 4;
  if (!this->_internal_vehicle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle());
  }

  // string source_hub = 5;
  if (!this->_internal_source_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_hub());
  }

  // string destination_hub = 6;
  if (!this->_internal_destination_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_hub());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogisticsNetworkState_UsedCapacityInVehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogisticsNetworkState_UsedCapacityInVehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogisticsNetworkState_UsedCapacityInVehicle::GetClassData() const { return &_class_data_; }


void LogisticsNetworkState_UsedCapacityInVehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogisticsNetworkState_UsedCapacityInVehicle*>(&to_msg);
  auto& from = static_cast<const LogisticsNetworkState_UsedCapacityInVehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.used_capacity_.MergeFrom(from._impl_.used_capacity_);
  if (!from._internal_line().empty()) {
    _this->_internal_set_line(from._internal_line());
  }
  if (!from._internal_line_rotation().empty()) {
    _this->_internal_set_line_rotation(from._internal_line_rotation());
  }
  if (!from._internal_vehicle().empty()) {
    _this->_internal_set_vehicle(from._internal_vehicle());
  }
  if (!from._internal_source_hub().empty()) {
    _this->_internal_set_source_hub(from._internal_source_hub());
  }
  if (!from._internal_destination_hub().empty()) {
    _this->_internal_set_destination_hub(from._internal_destination_hub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogisticsNetworkState_UsedCapacityInVehicle::CopyFrom(const LogisticsNetworkState_UsedCapacityInVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogisticsNetworkState_UsedCapacityInVehicle::IsInitialized() const {
  return true;
}

void LogisticsNetworkState_UsedCapacityInVehicle::InternalSwap(LogisticsNetworkState_UsedCapacityInVehicle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.used_capacity_.InternalSwap(&other->_impl_.used_capacity_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_, lhs_arena,
      &other->_impl_.line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_rotation_, lhs_arena,
      &other->_impl_.line_rotation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehicle_, lhs_arena,
      &other->_impl_.vehicle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_hub_, lhs_arena,
      &other->_impl_.source_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_hub_, lhs_arena,
      &other->_impl_.destination_hub_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetworkState_UsedCapacityInVehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[40]);
}

// ===================================================================

class LogisticsNetworkState::_Internal {
 public:
};

LogisticsNetworkState::LogisticsNetworkState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LogisticsNetworkState)
}
LogisticsNetworkState::LogisticsNetworkState(const LogisticsNetworkState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogisticsNetworkState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routed_parcels_){from._impl_.routed_parcels_}
    , decltype(_impl_.parcel_routes_){from._impl_.parcel_routes_}
    , decltype(_impl_.used_capacity_in_vehicle_){from._impl_.used_capacity_in_vehicle_}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LogisticsNetworkState)
}

inline void LogisticsNetworkState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routed_parcels_){arena}
    , decltype(_impl_.parcel_routes_){arena}
    , decltype(_impl_.used_capacity_in_vehicle_){arena}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogisticsNetworkState::~LogisticsNetworkState() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LogisticsNetworkState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogisticsNetworkState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routed_parcels_.~RepeatedPtrField();
  _impl_.parcel_routes_.~RepeatedPtrField();
  _impl_.used_capacity_in_vehicle_.~RepeatedPtrField();
  _impl_.network_.Destroy();
}

void LogisticsNetworkState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogisticsNetworkState::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LogisticsNetworkState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routed_parcels_.Clear();
  _impl_.parcel_routes_.Clear();
  _impl_.used_capacity_in_vehicle_.Clear();
  _impl_.network_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogisticsNetworkState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LogisticsNetworkState.network"));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.Parcel routed_parcels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routed_parcels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.ParcelRoute parcel_routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parcel_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle used_capacity_in_vehicle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_used_capacity_in_vehicle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogisticsNetworkState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LogisticsNetworkState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LogisticsNetworkState.network");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network(), target);
  }

  // repeated .operations_research.lattle.Parcel routed_parcels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routed_parcels_size()); i < n; i++) {
    const auto& repfield = this->_internal_routed_parcels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.lattle.ParcelRoute parcel_routes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parcel_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_parcel_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle used_capacity_in_vehicle = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_used_capacity_in_vehicle_size()); i < n; i++) {
    const auto& repfield = this->_internal_used_capacity_in_vehicle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LogisticsNetworkState)
  return target;
}

size_t LogisticsNetworkState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LogisticsNetworkState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.lattle.Parcel routed_parcels = 2;
  total_size += 1UL * this->_internal_routed_parcels_size();
  for (const auto& msg : this->_impl_.routed_parcels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.lattle.ParcelRoute parcel_routes = 3;
  total_size += 1UL * this->_internal_parcel_routes_size();
  for (const auto& msg : this->_impl_.parcel_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.lattle.LogisticsNetworkState.UsedCapacityInVehicle used_capacity_in_vehicle = 4;
  total_size += 1UL * this->_internal_used_capacity_in_vehicle_size();
  for (const auto& msg : this->_impl_.used_capacity_in_vehicle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string network = 1;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogisticsNetworkState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogisticsNetworkState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogisticsNetworkState::GetClassData() const { return &_class_data_; }


void LogisticsNetworkState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogisticsNetworkState*>(&to_msg);
  auto& from = static_cast<const LogisticsNetworkState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LogisticsNetworkState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routed_parcels_.MergeFrom(from._impl_.routed_parcels_);
  _this->_impl_.parcel_routes_.MergeFrom(from._impl_.parcel_routes_);
  _this->_impl_.used_capacity_in_vehicle_.MergeFrom(from._impl_.used_capacity_in_vehicle_);
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogisticsNetworkState::CopyFrom(const LogisticsNetworkState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LogisticsNetworkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogisticsNetworkState::IsInitialized() const {
  return true;
}

void LogisticsNetworkState::InternalSwap(LogisticsNetworkState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routed_parcels_.InternalSwap(&other->_impl_.routed_parcels_);
  _impl_.parcel_routes_.InternalSwap(&other->_impl_.parcel_routes_);
  _impl_.used_capacity_in_vehicle_.InternalSwap(&other->_impl_.used_capacity_in_vehicle_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogisticsNetworkState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[41]);
}

// ===================================================================

class LattleValidationError_FieldReference::_Internal {
 public:
  static const ::operations_research::lattle::LattleValidationError_FieldReference& sub_field(const LattleValidationError_FieldReference* msg);
};

const ::operations_research::lattle::LattleValidationError_FieldReference&
LattleValidationError_FieldReference::_Internal::sub_field(const LattleValidationError_FieldReference* msg) {
  return *msg->_impl_.sub_field_;
}
LattleValidationError_FieldReference::LattleValidationError_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LattleValidationError.FieldReference)
}
LattleValidationError_FieldReference::LattleValidationError_FieldReference(const LattleValidationError_FieldReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LattleValidationError_FieldReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sub_field_){nullptr}
    , decltype(_impl_.index_or_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sub_field()) {
    _this->_impl_.sub_field_ = new ::operations_research::lattle::LattleValidationError_FieldReference(*from._impl_.sub_field_);
  }
  clear_has_index_or_key();
  switch (from.index_or_key_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case INDEX_OR_KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LattleValidationError.FieldReference)
}

inline void LattleValidationError_FieldReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sub_field_){nullptr}
    , decltype(_impl_.index_or_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_index_or_key();
}

LattleValidationError_FieldReference::~LattleValidationError_FieldReference() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LattleValidationError.FieldReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LattleValidationError_FieldReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sub_field_;
  if (has_index_or_key()) {
    clear_index_or_key();
  }
}

void LattleValidationError_FieldReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LattleValidationError_FieldReference::clear_index_or_key() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.lattle.LattleValidationError.FieldReference)
  switch (index_or_key_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kKey: {
      _impl_.index_or_key_.key_.Destroy();
      break;
    }
    case INDEX_OR_KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INDEX_OR_KEY_NOT_SET;
}


void LattleValidationError_FieldReference::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LattleValidationError.FieldReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sub_field_ != nullptr) {
    delete _impl_.sub_field_;
  }
  _impl_.sub_field_ = nullptr;
  clear_index_or_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LattleValidationError_FieldReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LattleValidationError.FieldReference.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LattleValidationError.FieldReference.key"));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.LattleValidationError.FieldReference sub_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LattleValidationError_FieldReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LattleValidationError.FieldReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LattleValidationError.FieldReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 index = 2;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // string key = 3;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LattleValidationError.FieldReference.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // .operations_research.lattle.LattleValidationError.FieldReference sub_field = 4;
  if (this->_internal_has_sub_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sub_field(this),
        _Internal::sub_field(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LattleValidationError.FieldReference)
  return target;
}

size_t LattleValidationError_FieldReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LattleValidationError.FieldReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .operations_research.lattle.LattleValidationError.FieldReference sub_field = 4;
  if (this->_internal_has_sub_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sub_field_);
  }

  switch (index_or_key_case()) {
    // int32 index = 2;
    case kIndex: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
      break;
    }
    // string key = 3;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    case INDEX_OR_KEY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LattleValidationError_FieldReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LattleValidationError_FieldReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LattleValidationError_FieldReference::GetClassData() const { return &_class_data_; }


void LattleValidationError_FieldReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LattleValidationError_FieldReference*>(&to_msg);
  auto& from = static_cast<const LattleValidationError_FieldReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LattleValidationError.FieldReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_sub_field()) {
    _this->_internal_mutable_sub_field()->::operations_research::lattle::LattleValidationError_FieldReference::MergeFrom(
        from._internal_sub_field());
  }
  switch (from.index_or_key_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case INDEX_OR_KEY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LattleValidationError_FieldReference::CopyFrom(const LattleValidationError_FieldReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LattleValidationError.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LattleValidationError_FieldReference::IsInitialized() const {
  return true;
}

void LattleValidationError_FieldReference::InternalSwap(LattleValidationError_FieldReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.sub_field_, other->_impl_.sub_field_);
  swap(_impl_.index_or_key_, other->_impl_.index_or_key_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LattleValidationError_FieldReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[42]);
}

// ===================================================================

class LattleValidationError::_Internal {
 public:
  using HasBits = decltype(std::declval<LattleValidationError>()._impl_._has_bits_);
  static const ::operations_research::lattle::LattleValidationError_FieldReference& field(const LattleValidationError* msg);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offending_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::operations_research::lattle::LattleValidationError_FieldReference&
LattleValidationError::_Internal::field(const LattleValidationError* msg) {
  return *msg->_impl_.field_;
}
LattleValidationError::LattleValidationError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.lattle.LattleValidationError)
}
LattleValidationError::LattleValidationError(const LattleValidationError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LattleValidationError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.offending_values_){}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.offending_values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offending_values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_offending_values()) {
    _this->_impl_.offending_values_.Set(from._internal_offending_values(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_field()) {
    _this->_impl_.field_ = new ::operations_research::lattle::LattleValidationError_FieldReference(*from._impl_.field_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:operations_research.lattle.LattleValidationError)
}

inline void LattleValidationError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.offending_values_){}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.code_){0}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.offending_values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offending_values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LattleValidationError::~LattleValidationError() {
  // @@protoc_insertion_point(destructor:operations_research.lattle.LattleValidationError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LattleValidationError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  _impl_.offending_values_.Destroy();
  if (this != internal_default_instance()) delete _impl_.field_;
}

void LattleValidationError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LattleValidationError::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.lattle.LattleValidationError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.offending_values_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.field_ != nullptr) {
    delete _impl_.field_;
  }
  _impl_.field_ = nullptr;
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LattleValidationError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.lattle.LattleValidationError.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::operations_research::lattle::LattleValidationError_Code>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.lattle.LattleValidationError.FieldReference field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LattleValidationError.error_message"));
        } else
          goto handle_unusual;
        continue;
      // optional string offending_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_offending_values();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.lattle.LattleValidationError.offending_values"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LattleValidationError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.lattle.LattleValidationError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.lattle.LattleValidationError.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .operations_research.lattle.LattleValidationError.FieldReference field = 2;
  if (this->_internal_has_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::field(this),
        _Internal::field(this).GetCachedSize(), target, stream);
  }

  // optional string error_message = 3;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LattleValidationError.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // optional string offending_values = 4;
  if (_internal_has_offending_values()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offending_values().data(), static_cast<int>(this->_internal_offending_values().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.lattle.LattleValidationError.offending_values");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_offending_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.lattle.LattleValidationError)
  return target;
}

size_t LattleValidationError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.lattle.LattleValidationError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional string offending_values = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offending_values());
    }

  }
  // .operations_research.lattle.LattleValidationError.FieldReference field = 2;
  if (this->_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.field_);
  }

  // .operations_research.lattle.LattleValidationError.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LattleValidationError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LattleValidationError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LattleValidationError::GetClassData() const { return &_class_data_; }


void LattleValidationError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LattleValidationError*>(&to_msg);
  auto& from = static_cast<const LattleValidationError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.lattle.LattleValidationError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_offending_values(from._internal_offending_values());
    }
  }
  if (from._internal_has_field()) {
    _this->_internal_mutable_field()->::operations_research::lattle::LattleValidationError_FieldReference::MergeFrom(
        from._internal_field());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LattleValidationError::CopyFrom(const LattleValidationError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.lattle.LattleValidationError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LattleValidationError::IsInitialized() const {
  return true;
}

void LattleValidationError::InternalSwap(LattleValidationError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offending_values_, lhs_arena,
      &other->_impl_.offending_values_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LattleValidationError, _impl_.code_)
      + sizeof(LattleValidationError::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(LattleValidationError, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LattleValidationError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lattle_2eproto_getter, &descriptor_table_lattle_2eproto_once,
      file_level_metadata_lattle_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lattle
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::lattle::DateTimeRange*
Arena::CreateMaybeMessage< ::operations_research::lattle::DateTimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::DateTimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::IntegerRange*
Arena::CreateMaybeMessage< ::operations_research::lattle::IntegerRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::IntegerRange >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Function1D*
Arena::CreateMaybeMessage< ::operations_research::lattle::Function1D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Function1D >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::PricingStrategy*
Arena::CreateMaybeMessage< ::operations_research::lattle::PricingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::PricingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::SeparableNDFunction_ComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::SeparableNDFunction*
Arena::CreateMaybeMessage< ::operations_research::lattle::SeparableNDFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::SeparableNDFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::ValueDimension*
Arena::CreateMaybeMessage< ::operations_research::lattle::ValueDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::ValueDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::PieceWiseAffineFunction*
Arena::CreateMaybeMessage< ::operations_research::lattle::PieceWiseAffineFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::PieceWiseAffineFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::PieceWiseAffineSegment*
Arena::CreateMaybeMessage< ::operations_research::lattle::PieceWiseAffineSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::PieceWiseAffineSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Instance_ParcelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::Instance_ParcelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Instance_ParcelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Instance*
Arena::CreateMaybeMessage< ::operations_research::lattle::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetwork_LinesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetwork_VehiclesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetwork_HubsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetwork*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetwork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Line_NextRotationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::Line_NextRotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Line_NextRotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Line*
Arena::CreateMaybeMessage< ::operations_research::lattle::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::GeneratedLineAndRotation_ArrivalTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::GeneratedLineAndRotation_DepartureTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::GeneratedLineAndRotation*
Arena::CreateMaybeMessage< ::operations_research::lattle::GeneratedLineAndRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::GeneratedLineAndRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LineRotation_ArrivalTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LineRotation_DepartureTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LineRotation_StartingEarlinessTardinessCostsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LineRotation_ArrivalEarlinessTardinessCostsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LineRotation*
Arena::CreateMaybeMessage< ::operations_research::lattle::LineRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LineRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::EarlinessTardiness*
Arena::CreateMaybeMessage< ::operations_research::lattle::EarlinessTardiness >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::EarlinessTardiness >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Vehicle*
Arena::CreateMaybeMessage< ::operations_research::lattle::Vehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Vehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Hub*
Arena::CreateMaybeMessage< ::operations_research::lattle::Hub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Hub >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::CrossDockingCapacity*
Arena::CreateMaybeMessage< ::operations_research::lattle::CrossDockingCapacity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::CrossDockingCapacity >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::CrossDockingTime*
Arena::CreateMaybeMessage< ::operations_research::lattle::CrossDockingTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::CrossDockingTime >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::DistanceMatrixEntry*
Arena::CreateMaybeMessage< ::operations_research::lattle::DistanceMatrixEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::DistanceMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Parcel*
Arena::CreateMaybeMessage< ::operations_research::lattle::Parcel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Parcel >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::ParcelRoute_CostEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::ParcelRoute*
Arena::CreateMaybeMessage< ::operations_research::lattle::ParcelRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::ParcelRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::Path*
Arena::CreateMaybeMessage< ::operations_research::lattle::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::IncompletePath*
Arena::CreateMaybeMessage< ::operations_research::lattle::IncompletePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::IncompletePath >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::PathSegment*
Arena::CreateMaybeMessage< ::operations_research::lattle::PathSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::PathSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::AnnotatedPathSegment_SegmentCostDueToVehicleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::AnnotatedPathSegment*
Arena::CreateMaybeMessage< ::operations_research::lattle::AnnotatedPathSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::AnnotatedPathSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::EarlinessTardinessCost*
Arena::CreateMaybeMessage< ::operations_research::lattle::EarlinessTardinessCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::EarlinessTardinessCost >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetworkState_UsedCapacityInVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LogisticsNetworkState*
Arena::CreateMaybeMessage< ::operations_research::lattle::LogisticsNetworkState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LogisticsNetworkState >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LattleValidationError_FieldReference*
Arena::CreateMaybeMessage< ::operations_research::lattle::LattleValidationError_FieldReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LattleValidationError_FieldReference >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::lattle::LattleValidationError*
Arena::CreateMaybeMessage< ::operations_research::lattle::LattleValidationError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::lattle::LattleValidationError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
