syntax = "proto3";

package operations_research.lattle;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/type/datetime.proto";
import "google/type/latlng.proto";
import "storage/util/int128/int128.proto";

option java_package = "com.google.operationsresearch.lattle.v1";
option java_multiple_files = true;
option java_outer_classname = "LattleProto";
option use_java_stubby_library = true;

// go/lattle-dd

// ---------------------
// - Part 0: utilities -
// ---------------------

// This could be a part of the basic Protobuf API or an OR-specific standard
// library.

// Range of times between two DateTime. For a pointwise date time, use
// start == end.
//
// google/type/interval.proto serves a similar purpose, but with physical time
// (we only care about civil time).
message DateTimeRange {
  google.type.DateTime first_date = 1;
  google.type.DateTime last_date = 2;
}

message IntegerRange {
  // Interval open if unset.
  optional int32 start_value = 1;
  // Interval open if unset.
  optional int32 end_value = 2;
}

message Function1D {
  // The unity of the argument of the function is supposed to be:
  // - if a weight: kg
  // - if a time: min
  // - if a number of pallets: 1
  oneof function {
    double constant = 1;
    PieceWiseAffineFunction pwl = 2;
  }
}

message PricingStrategy {
  oneof pricing_strategy {
    SeparableNDFunction separable = 1;
  }
  // TODO(tcuvelier): what about dynamic pricing? Consider API calls for the
  //  API customer to compute the price based on a path being evaluated.
}

message SeparableNDFunction {
  map<string, Function1D> components = 1;
  double constant_price = 2;
}

// A value along one predefined dimension. The field `value` must be set to the
// corresponding type of the `dimension`.
message ValueDimension {
  int64 value = 1;
  string dimension = 2;
}

// Design similar to
// http://google3/util/operations_research/util/piecewise_linear_function.h
// Limited to 1D.
message PieceWiseAffineFunction {
  repeated PieceWiseAffineSegment segments = 1;
}
message PieceWiseAffineSegment {
  double start_x = 1;
  double start_y = 2;
  double end_x = 3;
  double end_y = 4;
}

// -------------------------------------------------
// - Part 1: description of the logistics network. -
// -------------------------------------------------

// Describes an instance of a problem to solve. This message should mostly be
// used to exchange data with API customers outside the API.
message Instance {
  string name = 1;
  LogisticsNetwork network = 2;
  repeated Shipment shipments = 3;
}

// Describes the full existing logistics network that can be used.
// A given API customer might have several networks (e.g., the main network and
// a possible future modification to evaluate).
message LogisticsNetwork {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/LogisticsNetwork"
    pattern: "networks/{network}"
  };

  // Cannot be updated.
  string name = 1;

  repeated Line lines = 2;
  repeated Vehicle vehicles = 3;
  repeated Hub hubs = 4;
  // Distance, weight, pallets, etc., plus scaling (to map floats to integers).
  repeated ValueDimension dimensions = 5;

  // Price to be paid by the sender for shipping a shipment that does not
  // require a dedicated line.
  PricingStrategy pricing = 6;

  // Single monetary unit used throughout the network. A given API customer can
  // have several different units for different networks; a network is only
  // allowed to have one monetary unit.
  // The unit must be encoded in ISO 4217, like google3/google/type/money.proto.
  string currency_code = 7;

  // Time discretization. Decisions are output with this precision in time.
  // Internally, state is kept with this precision.
  google.protobuf.Duration time_step = 8;

  // Distance matrix (represented a list of weighted directed edges).
  repeated DistanceMatrixEntry distance_matrix = 9;
}

// A line that is being operated at a given frequency.
message Line {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/Line"
    pattern: "networks/{network}/lines/{line}"
  };

  // Cannot be updated.
  string name = 1;

  // List of hubs that this line calls at, in the order vehicles stop at them.
  repeated string hub_ids = 2;

  // List of rotations with a name for each. The API server does not
  // periodically create new entries, this is up to the API customer.
  repeated LineRotation next_rotations = 3;
}

// One rotation of a line that is generated by Lattle and not the API customer.
// It is inherently less constrained, and could use any vehicle (unless the API
// customer decides otherwise in subsequent calls).
message GeneratedLineAndRotation {
  // No name, this line is part of the solution and not the input.

  // Map between hub IDs and times. Both maps are supposed to have the same
  // keys (minus the source hub, with no arrival time, and the destination hub,
  // with no departure time).
  map<string, google.type.DateTime> arrival_times = 1;
  map<string, google.type.DateTime> departure_times = 2;
}

// A vehicle starts operating this line at a particular time.
message LineRotation {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/LineRotation"
    pattern: "networks/{network}/lines/{line}/rotations/{rotation}"
  };

  // Cannot be updated.
  string name = 1;

  // Ranges where departure/arrival is allowed without cost (i.e., if not
  // pointwise, the actual starting and arrival times are decided by the
  // system). Both maps are supposed to have the same keys (minus the source
  // hub, with no arrival time, and the destination hub, with no departure
  // time).
  map<string, DateTimeRange> arrival_times = 2;
  map<string, DateTimeRange> departure_times = 3;
  // Earliness/tardiness costs and bounds. Both maps are supposed to have the
  // same keys (minus the source hub, with no arrival time, and the destination
  // hub, with no departure time).
  map<string, EarlinessTardiness> starting_earliness_tardiness_costs = 4;
  map<string, EarlinessTardiness> arrival_earliness_tardiness_costs = 5;

  // Maximum number of vehicles that can be assigned to this rotation. If unset:
  // no limit in terms of vehicles for this rotation. Otherwise, upper bound on
  // the number of vehicles that can be allocated to this rotation (among the
  // allow list `vehicle_ids`).
  // In particular, a value of 0 disables this rotation (no vehicles allowed).
  // TODO: why "maximum" in the name?
  optional IntegerRange maximum_number_vehicles = 6;

  // List of vehicles that could be doing this line rotation (i.e. allow list).
  // If number_vehicles reduces to one value corresponding to the number of
  // vehicles, all those vehicles will be assigned to the line rotation.
  // If no vehicles, all are considered to be available.
  repeated string vehicles = 7;

  // Cost of having *any* vehicle doing this line, regardless of vehicle
  // (driver, maintenance, etc.).
  PricingStrategy fixed_price = 8;
}

message EarlinessTardiness {
  // Maximum allowable earliness/tardiness. Useful only with costs.
  optional google.protobuf.Duration maximum_earliness = 1;
  optional google.protobuf.Duration maximum_tardiness = 2;
  // Cost of earliness/tardiness. Unset iff no cost for earliness/tardiness.
  optional Function1D earliness_cost = 3;
  optional Function1D tardiness_cost = 4;
}

// No name, it is stored as a map key within the LogisticsNetwork.
message Vehicle {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/Vehicle"
    pattern: "networks/{network}/vehicles/{vehicle}"
  };

  // Cannot be updated.
  string name = 1;

  // Vehicle characteristics.
  repeated ValueDimension capacities = 2;

  // Cost for using the vehicle. These are functions of one argument: the
  // distance the vehicle travels, the weight the vehicle transports,
  // the number of pallets the vehicle transports.
  // These functions account for maintenance, fuel, and handling costs.
  // These cost may include an upfront cost (paid once the vehicle is used,
  // mostly useful for subcontracting).
  PricingStrategy cost = 3;

  // Price to be paid by the paying party, only if the vehicle is being used in
  // a generated line (i.e. not part of the input network).
  PricingStrategy pricing = 4;

  // Whether this vehicle can be used for generated lines. If set to `false`,
  // the vehicle will be limited to predefined lines where it is allowed.
  bool allowed_for_generated_lines = 5;

  // Forced positions for the current vehicle, along with times. For instance,
  // use entries to model the fact that a vehicle that starts or ends at a given
  // hub.
  message VehiclePositionConstraint {
    google.type.DateTime time = 1;
    string hub_id = 2;
  }
  repeated VehiclePositionConstraint vehicle_position_constraints = 6;
}

// Shipments must be brought from one hub to another one.
message Hub {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/Hub"
    pattern: "networks/{network}/hubs/{hub}"
  };

  // Cannot be updated.
  string name = 1;

  // Position to compute real-world paths.
  google.type.LatLng position = 2;
  // Opening times. For now, use a very rough representation: one entry each
  // time the hub opens (if its workers have a lunch break and no one works at
  // that time, there will be two entries for that day).
  repeated DateTimeRange opening_times = 3;

  // Capacity of the complete hub.
  CrossDockingCapacity cross_docking_capacity = 4;
  CrossDockingTime cross_docking_time = 5;
}

message CrossDockingCapacity {
  repeated ValueDimension capacity_per_hour = 1;
}

message CrossDockingTime {
  google.protobuf.Duration time_constant = 1;
  // Separability is a simplifying assumption.
  SeparableNDFunction time = 2;
}

// TODO: what about transshipment?

message DistanceMatrixEntry {
  string source_hub = 1;
  string destination_hub = 2;
  repeated ValueDimension weights = 3;
}

// ---------------------------------------------------------------
// - Part 2: elements that must go through the logistics network -
// ---------------------------------------------------------------

message Shipment {
  option (google.api.resource) = {
    type: "optimizationai-pa.googleapis.com/Shipment"
    pattern: "networks/{network}/shipments/{shipment}"
  };

  // Cannot be updated.
  string name = 1;
  // Ends of the path the shipment must take.
  string source_hub = 2;
  string destination_hub = 3;
  // Departure time.
  google.type.DateTime departure_time = 4;
  // *Expected* arrival time (i.e. soft constraint).
  DateTimeRange arrival_time = 5;
  // SLAs indicate that this time may be exceeded with some penalty.
  // (If later than the maximum, the package is no more useful.)
  // The penalty is given by a function of the delay (in minutes).
  EarlinessTardiness arrival_earliness_tardiness_cost = 6;
  // Revenue from this package (only used to compute the reward), i.e. price
  // paid by the paying party.
  // If unset, revenue is computed by the system (depending on whether a new
  // line is generated for this shipment or not).
  optional double revenue = 7;
  // Used with vehicle and hub capacities.
  repeated ValueDimension size = 8;
}

message Path {
  string shipment = 1 [(google.api.resource_reference) = {
    type: "optimizationai-pa.googleapis.com/Shipment"
  }];
  repeated AnnotatedPathSegment segments = 2;
  google.type.DateTime departure_time = 3;
  google.type.DateTime arrival_time = 4;
  double incurred_penalties_from_arrival_time_per_minute = 5;
  double cost_constant = 6;
  map<string, double> cost = 7;

  storage_util.Int128 fingerprint = 8
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Represents a part of a path, either sent by the API customer to the API
// server (e.g., state change) or by the API server to the API customer (e.g.,
// routing a shipment).
message PathSegment {
  string source_hub = 1;
  string destination_hub = 2;
  string line = 3;
  string line_rotation = 4;
  string vehicle = 5;
}

// Represents a part of a path with more redundant information that can be
// computed based on the contained PathSegment and the LogisticsNetwork.
// These messages are typically returned by the API server.
message AnnotatedPathSegment {
  PathSegment segment = 1;

  google.type.DateTime arrival_time = 2;
  google.type.DateTime departure_time = 3;

  // Whether the API customer has decided to commit this part of the path.
  bool is_committed = 4;

  double segment_cost_constant = 5;
  // One entry per dimension.
  map<string, double> segment_cost_due_to_vehicle = 6;
  // Cost due to the line rotation.
  double segment_cost_due_to_departure = 7;
  double segment_cost_due_to_arrival = 8;
}
